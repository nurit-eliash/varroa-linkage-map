sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
NW_019211460.1 <- lapply(sites, "[", "site") %>% unlist()
InfoSites_11_01 <- c(NW_019211454.1, NW_019211455.1,NW_019211456.1, NW_019211457.1,NW_019211458.1,NW_019211459.1,NW_019211460.1) %>% unique() %>% as.data.frame()
# there are 13,651 informative sites for the 0/0 x 0/1 F1 "family"
write_delim(InfoSites_11_01, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/InfoSites_11_01.tsv", col_names = FALSE)
library("tidyverse")
library("plyr")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR") # for extracting genotype data from a vcf file
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("rstatix")
library("freqtables")
library("broom")
library("DescTools") # for the Goodness-of-Fit test, 3 variables; and for Breslow-Day Test for Homogeneity of the Odds Ratios
library("vcd") # for the woolf test testign log odds for each pair
library("patchwork") # for gathering the plots
#library("fuzzyjoin") # to join tables based on a string in a column
#library("aspi") # Repeated G–tests of Goodness-of-Fit, work only for 2 variables..
#library("RVAideMemoire") # Repeated G–tests of Goodness-of-Fit, work only for 2 variables...
#library("InfoTrad")
#library("ggthemes") # for more colors in the ggplot
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 8,
fig.asp = 0.6,
out.width = "100%")
#fig.width = 6,fig.asp = 0.8,out.width = "100%"
vcf <- read.vcfR("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/Q40BIALLDP16HDP40mis.5Chr7/Q40BIALLDP16HDP40mis.5Chr7.recode.vcf", verbose = FALSE )
vcf
# extract the genotype for each site in each individual
gt <- extract.gt(vcf, element = "GT")
gt <- as.data.frame(t(gt)) %>%
rownames_to_column("ID")
#clean the ID names
gt$ID <- sub("_[^_]+$", "", gt$ID)
table <-  gt %>%
t() %>%
as.data.frame() %>%
row_to_names(row_number = 1) %>%
dplyr::select(contains(c("son", "dat", "fnd"))) # keep only adults of F0, F1 and F2
table %>% select(contains(c("240_"))) %>% head()
# set the families (include only families with at least one adult F2)
family = grep("grndat|grnson",gt$ID, value=TRUE) %>%
str_extract("[^_]+")  %>%
unique()
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::rename(obs = n) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs)
# state the expected site proportion of each genotype and sex under a perfect mendelian segregation of F2
fem_exp <- data.frame(sex = "female", gt = c("0/0", "0/1", "1/1") , prop = c(0.5, 0.5,0))
male_exp <- data.frame(sex = "male",gt = c("0/0", "0/1", "1/1"),prop = c(0.5, 0,0.5))
mendel <- bind_rows(fem_exp,male_exp) %>% mutate(sex = as.character(sex))%>% mutate(gt = as.character(gt))
# mutate(type = "exp")
# using on the total genotypes count of sites per sample, calculate the expected counts, and add them to the observed counts into a final dat table
dat <- observed %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
left_join(mendel, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
x <- dat %>%
dplyr::select(c("sample","gt","sex", "exp","prop", "total")) %>%
mutate(type = "exp") %>%
dplyr::rename(count = exp)
y <- dat %>%
dplyr::select(c("sample","gt","sex", "obs","total")) %>%
mutate(type = "obs") %>%
dplyr::rename(count = obs) %>%
mutate(prop = (count/total))
df_male <- rbind(x, y) %>%
dplyr::filter(sex == "male")
df_fem <- rbind(x, y) %>%
dplyr::filter(sex == "female")
p_male_pooled <- ggplot(df_male, aes(fill=gt, y=prop, x=type)) +
geom_bar(position="fill", stat="identity", ) +
xlab("F2 males") +
ylab("Proportion of F2 genotype") +
labs(title = "F2 Males of F1 male (0/0) x female (0/1)",
subtitle = paste0("Pooled sites = ", df_male %>% dplyr::filter(gt == "0/0") %>% dplyr::filter(type == "obs") %>% summarise(sum(total)) %>% as.numeric())) +
scale_x_discrete("type", labels = c("Expected","Observed")) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=15),
axis.title.x = element_blank()) +scale_fill_manual(values=c("#ffbf00", "#9bc53d","#1982c4"))
p_female_pooled <- ggplot(df_fem, aes(fill=gt, y=prop, x=type)) +
geom_bar(position="fill", stat="identity", ) +
xlab("F2 females") +
ylab("Proportion of F2 genotype") +
labs(title = "F2 females of F1 male (0/0) x female (0/1)",
subtitle = paste0("Pooled sites = ", df_fem %>% dplyr::filter(gt == "0/0") %>% dplyr::filter(type == "obs") %>% summarise(sum(total)) %>% as.numeric())) +
scale_x_discrete("type", labels = c("Expected","Observed")) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=15),
axis.title.x = element_blank()) +scale_fill_manual(values=c("#ffbf00", "#9bc53d","#1982c4"))
grid.arrange(p_female_pooled, p_male_pooled, ncol = 2)
ggplot(df_male, aes(fill=gt, y=prop, x=type)) +
geom_bar(position="fill", stat="identity", ) +
xlab("F2 siblings") +
ylab("Proportion of F2 genotype") +
labs(title = "F2 Males of F1 male (0/0) x female (0/1)") +
# geom_text(aes(label = n), position = position_stack(vjust = 0.5)) +
geom_text(data = filter(df_male, gt == "1/1"), aes(y=prop, x=type, label=total), vjust = 0) +
facet_wrap(~ sample) +
labs(fill = "Genotype") +
theme_classic()+scale_fill_manual(values=c("#ffbf00", "#9bc53d","#1982c4"))
ggplot(df_fem, aes(fill=gt, y=prop, x=type)) +
geom_bar(position="fill", stat="identity", ) +
xlab("F2 siblings") +
ylab("Proportion of F2 genotype") +
labs(title = "F2 Females of F1 male (0/0) x female (0/1)") +
# geom_text(aes(label = n), position = position_stack(vjust = 0.5)) +
geom_text(data = filter(df_fem, gt == "1/1"), aes(y=prop, x=type, label=total), vjust = 0) +
facet_wrap(~ sample) +
labs(fill = "Genotype") +
theme_classic()+scale_fill_manual(values=c("#ffbf00", "#9bc53d","#1982c4"))
df_male
View(dat)
View(observed)
View(mendel)
# try to keep all genotypes
observed %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
all_join(mendel, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
# try to keep all genotypes
observed %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
join_all(mendel, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
# try to keep all genotypes
observed %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
full_join(mendel, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
# try to keep all genotypes
observed %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
full_join(mendel, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
observed
observed
observed %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt))
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
# state the expected site proportion of each genotype and sex under a perfect mendelian segregation of F2
fem_exp <- data.frame(sex = "female", gt = c("0/0", "0/1", "1/1") , prop = c(0.5, 0.5, 0))
male_exp <- data.frame(sex = "male",gt = c("0/0", "0/1", "1/1"),prop = c(0.5, 0, 0.5))
mendel <- bind_rows(fem_exp,male_exp) %>% mutate(sex = as.character(sex)) %>% mutate(gt = as.character(gt))
# using on the total genotypes count of sites per sample, calculate the expected counts, and add them to the observed counts into a final dat table
dat <- observed %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
left_join(mendel, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
# try to keep all genotypes
mendel %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
full_join(observed, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
# try to keep all genotypes
mendel %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
left_join(observed, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
# try to keep all genotypes
k <- mendel %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
left_join(observed, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
View(k)
mendel <- bind_rows(fem_exp,male_exp) %>% mutate(sex = as.character(sex)) %>% mutate(gt = as.character(gt)) %>% mutate(gt_exp = as.character(gt))
# using on the total genotypes count of sites per sample, calculate the expected counts, and add them to the observed counts into a final dat table
dat <- observed %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
left_join(mendel, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
# using on the total genotypes count of sites per sample, calculate the expected counts, and add them to the observed counts into a final dat table
dat <- observed %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
right_join(mendel, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
# try to keep all genotypes
k <- mendel %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
full_join(observed, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
mendel <- bind_rows(fem_exp,male_exp) %>% mutate(sex = as.character(sex)) %>% mutate(gt = as.character(gt)) %>% unite("gt_sex", gt:sex)
mendel <- bind_rows(fem_exp,male_exp) %>% mutate(sex = as.character(sex)) %>% mutate(gt = as.character(gt)) %>% mutate(gt_sex = paste(gt, sex))
mendel <- bind_rows(fem_exp,male_exp) %>% mutate(sex = as.character(sex)) %>% mutate(gt = as.character(gt)) %>% mutate(gt_sex = paste(gt, sex, sep="_"))
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample)) %>% mutate(gt_sex = paste(gt, sex, sep="_"))
# try to keep all genotypes
k <- observed %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
full_join(mendel, by = "gt_sex") %>%
mutate(exp = total*prop)
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample)) %>% mutate(gt_sex = paste(gt, sex, sample, sep="_"))
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample)) %>% mutate(gt = c("0/0", "0/1", "1/1"))
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
observed$sample
unique(observed$sample)
unique(observed$sample) %>% count()
unique(observed$sample)
samples <- unique(observed$sample)
mendel <- bind_rows(fem_exp,male_exp) %>% mutate(sex = as.character(sex)) %>% mutate(gt = as.character(gt)) %>% mutate(samples = samples)
mendel <- bind_rows(fem_exp,male_exp) %>% mutate(samples = samples) %>% mutate(sex = as.character(sex)) %>% mutate(gt = as.character(gt))
samples <- data.frame(unique(observed$sample))
View(samples)
samples <- data.frame(unique(observed$sample), gt = c("0/0", "0/1", "1/1"))
View(fem_exp)
samples %>%
rep(samples,each=3)
samples <- data.frame(unique(observed$sample))
rep(samples,each=3)
samples <- vector(unique(observed$sample))
samples <- vector(unique(observed$sample))
samples <- as.vector(unique(observed$sample))
samples %>%
rep(samples,each=3) %>% view()
rep(samples,each=3) %>% view()
mutate(sample = rep(samples,each=3)) %>% view()
samples <- as.data.frame(unique(observed$sample))
mutate(sample = rep(samples,each=3)) %>% view()
samples <- as.vector(unique(observed$sample))
mutate(sample = rep(samples,each=3)) %>% view()
samples <- as.vector(unique(observed$sample))
samples <- data_frame(unique(observed$sample))
samples <- tibble(unique(observed$sample))
View(samples)
rep(samples,each=3)) %>% view()
rep(samples,each=3) %>% view()
samples <- unique(observed$sample)
rep(samples,each=3) %>% view()
rep(samples,each=3) %>% class() view()
rep(samples,each=3) %>% class()
as.data.frame(rep(samples,each=3)) %>% class() view()
as.data.frame(rep(samples,each=3)) %>% class()
as.data.frame(rep(samples,each=3)) %>%  view()
as.data.frame(mutate(x=rep(samples,each=3))) %>%  view()
mutate(as.data.frame(x=rep(samples,each=3))) %>%  view()
mutate(as.data.frame(x=rep(samples,each=3))) %>% class()
samples <- rep(unique(observed$sample), each =3)
samples
gt
data_frame(samples = samples, gt =  c("0/0", "0/1", "1/1"))
samples <- rep(unique(observed$sample), each =3) %>% as.data.frame()
View(samples)
data_frame(samples = samples, gt =  c("0/0", "0/1", "1/1"))
samples <- as.data.frame(ID = rep(unique(observed$sample), each =3), gt = "0/0")
samples <- data.frame(ID = rep(unique(observed$sample), each =3), gt = "0/0")
samples <- data.frame(ID = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
# state the expected site proportion of each genotype and sex under a perfect mendelian segregation of F2
fem_exp <- data.frame(sex = "female", gt = c("0/0", "0/1", "1/1") , prop = c(0.5, 0.5, 0))
male_exp <- data.frame(sex = "male",gt = c("0/0", "0/1", "1/1"),prop = c(0.5, 0, 0.5))
mendel <- bind_rows(fem_exp,male_exp) %>% mutate(sex = as.character(sex)) %>% mutate(gt = as.character(gt))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
left_join(observed, samples, by=c("sample","gt")) %>% view()
left_join( samples, observed, by=c("sample","gt")) %>% view()
left_join(samples, observed, by=c("sample","gt")) %>% replace_na(obs, 0) %>% view()
left_join(samples, observed, by=c("sample","gt")) %>% tidyr::replace_na(., obs, 0) %>% view()
left_join(samples, observed, by=c("sample","gt")) %>% tidyr::replace_na("obs", 0) %>% view()
left_join(samples, observed, by=c("sample","gt")) %>% mutate_at(obs, ~replace_na(.,0)) %>% view()
k =  left_join(samples, observed, by=c("sample","gt")) %>% view()
d %>% mutate_at(obs, ~replace_na(.,0)) %>% view()
k %>% mutate_at(obs, ~replace_na(.,0)) %>% view()
k$obs%>% class()
k$obs %>% replace_na(.,0) %>% view() class()
replace_na( k$obs,0) %>% view()
k =  left_join(samples, observed, by=c("sample","gt")) %>% replace_na(obs,0)
k =  left_join(samples, observed, by=c("sample","gt")) %>% view()
left_join(samples, observed, by=c("sample","gt")) %>% replace_na("obs",0)
samples <- left_join(samples, observed, by=c("sample","gt"))
samples$obs <- replace_na(samples$obs,0) %>% view()
samples$obs <- samples %>% replace_na(obs,0) %>% view()
samples$obs
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples <- left_join(samples, observed, by=c("sample","gt"))
samples <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(obs = coalesce(obs, 0))
samples <- left_join(samples, observed, by=c("sample","gt")) %>% setnafill(fill=0)
samples <- left_join(samples, observed, by=c("sample","gt")) %>% setnafill(obs, fill=0)
samples <- left_join(samples, observed, by=c("sample","gt")) %>% select(c(sample, gt, obs))
samples <- left_join(samples, observed, by=c("sample","gt")) %>% dplyr::select(c(sample, gt, obs))
samples <- left_join(samples, observed, by=c("sample","gt")) %>% dplyr::select(c("sample", "gt", "obs"))
samples <- left_join(samples, observed, by=c("sample","gt"))
samples <- left_join(samples, observed, by=c("sample","gt")) %>% dplyr::select(c("sample", "gt", "obs"))
samples <- left_join(samples, observed, by=c("sample","gt")) %>% dplyr::select(c("sample", "gt", "obs")) %>% setnafill(fill=0)
left_join(samples, observed, by=c("sample","gt")) %>% dplyr::select(c("sample", "gt", "obs")) %>% setnafill(fill=0)
samples <- left_join(samples, observed, by=c("sample","gt")) %>% dplyr::select(c("sample", "gt", "obs"))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples <- left_join(samples, observed, by=c("sample","gt")) %>% dplyr::select(c("sample", "gt", "obs"))%>% setnafill(fill=0)
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples <- left_join(samples, observed, by=c("sample","gt")) %>% dplyr::select(c("sample", "gt", "obs"))%>% replace_na(., 0)
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples <- left_join(samples, observed, by=c("sample","gt")) %>% dplyr::select(c("sample", "gt", "obs"))
setnafill(samples, fill = 0)
class(samples$obs)
setnafill(samples$obs, fill = 0)
class(samples$obs)
class(samples)
na_replace(samples$obs,0)
mutate_all(samples, ~coalesce(.,0))
my_dataframe <- samples %>% replace(is.na(.), 0)
my_dataframe
my_dataframe <- samples %>% replace(is.na(.), 0) %>% view()
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples <- left_join(samples, observed, by=c("sample","gt")) %>% dplyr::select(c("sample", "gt", "obs"))  %>% replace(is.na(.), 0) %>% view()
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
together <- left_join(samples, observed, by=c("sample","gt")) %>% dplyr::select(c("sample", "gt", "obs"))  %>% replace(is.na(.), 0)
View(together)
together <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
together <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(obs))) %>%
replace(is.na(.), 0)
together <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(obs)))
# state the expected site proportion of each genotype and sex under a perfect mendelian segregation of F2
fem_exp <- data.frame(sex = "female", gt = c("0/0", "0/1", "1/1") , prop = c(0.5, 0.5, 0))
male_exp <- data.frame(sex = "male",gt = c("0/0", "0/1", "1/1"),prop = c(0.5, 0, 0.5))
mendel <- bind_rows(fem_exp,male_exp) %>% mutate(sex = as.character(sex)) %>% mutate(gt = as.character(gt))
# using on the total genotypes count of sites per sample, calculate the expected counts, and add them to the observed counts into a final dat table
dat <- together %>%
#mutate(sample = as.character(sample)) %>%
mutate(gt = as.character(gt)) %>%
right_join(mendel, by = c("gt", "sex")) %>%
mutate(exp = total*prop)
View(dat)
x <- dat %>%
dplyr::select(c("sample","gt","sex", "exp","prop", "total")) %>%
mutate(type = "exp") %>%
dplyr::rename(count = exp)
y <- dat %>%
dplyr::select(c("sample","gt","sex", "obs","total")) %>%
mutate(type = "obs") %>%
dplyr::rename(count = obs) %>%
mutate(prop = (count/total))
df_male <- rbind(x, y) %>%
dplyr::filter(sex == "male")
df_fem <- rbind(x, y) %>%
dplyr::filter(sex == "female")
p_male_pooled <- ggplot(df_male, aes(fill=gt, y=prop, x=type)) +
geom_bar(position="fill", stat="identity", ) +
xlab("F2 males") +
ylab("Proportion of F2 genotype") +
labs(title = "F2 Males of F1 male (0/0) x female (0/1)",
subtitle = paste0("Pooled sites = ", df_male %>% dplyr::filter(gt == "0/0") %>% dplyr::filter(type == "obs") %>% summarise(sum(total)) %>% as.numeric())) +
scale_x_discrete("type", labels = c("Expected","Observed")) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=15),
axis.title.x = element_blank()) +scale_fill_manual(values=c("#ffbf00", "#9bc53d","#1982c4"))
p_female_pooled <- ggplot(df_fem, aes(fill=gt, y=prop, x=type)) +
geom_bar(position="fill", stat="identity", ) +
xlab("F2 females") +
ylab("Proportion of F2 genotype") +
labs(title = "F2 females of F1 male (0/0) x female (0/1)",
subtitle = paste0("Pooled sites = ", df_fem %>% dplyr::filter(gt == "0/0") %>% dplyr::filter(type == "obs") %>% summarise(sum(total)) %>% as.numeric())) +
scale_x_discrete("type", labels = c("Expected","Observed")) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=15),
axis.title.x = element_blank()) +scale_fill_manual(values=c("#ffbf00", "#9bc53d","#1982c4"))
grid.arrange(p_female_pooled, p_male_pooled, ncol = 2)
ggplot(df_male, aes(fill=gt, y=prop, x=type)) +
geom_bar(position="fill", stat="identity", ) +
xlab("F2 siblings") +
ylab("Proportion of F2 genotype") +
labs(title = "F2 Males of F1 male (0/0) x female (0/1)") +
# geom_text(aes(label = n), position = position_stack(vjust = 0.5)) +
geom_text(data = filter(df_male, gt == "1/1"), aes(y=prop, x=type, label=total), vjust = 0) +
facet_wrap(~ sample) +
labs(fill = "Genotype") +
theme_classic()+scale_fill_manual(values=c("#ffbf00", "#9bc53d","#1982c4"))
ggplot(df_fem, aes(fill=gt, y=prop, x=type)) +
geom_bar(position="fill", stat="identity", ) +
xlab("F2 siblings") +
ylab("Proportion of F2 genotype") +
labs(title = "F2 Females of F1 male (0/0) x female (0/1)") +
# geom_text(aes(label = n), position = position_stack(vjust = 0.5)) +
geom_text(data = filter(df_fem, gt == "1/1"), aes(y=prop, x=type, label=total), vjust = 0) +
facet_wrap(~ sample) +
labs(fill = "Genotype") +
theme_classic()+scale_fill_manual(values=c("#ffbf00", "#9bc53d","#1982c4"))
# set the families (include only families with at least one adult F2)
family = grep("grndat|grnson",gt$ID, value=TRUE) %>%
str_extract("[^_]+")  %>%
unique()
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::rename(obs = n) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
together <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(obs)))
View(together)
# state the expected site proportion of each genotype and sex under the different hypothesis:
# Heterozygotic sites are real:Males can carry and inherit two alleles
fem_sitesReal <- data.frame(type = "sitesReal", sex = "female", gt = c("0/0", "0/1", "1/1") , prop = c(0.25, 0.5, 0.25))
# Heterozygotic sites are false:Males can carry and inherit only one allele
# the heterozygotic sites are actually (0)
fem_sitesFalse_0 <- data.frame(type = "sitesFalse_0",sex = "female", gt = c("0/0", "0/1", "1/1") , prop = c(0.5, 0.5, 0))
# the heterozygotic sites are actually (1)
fem_sitesFalse_1 <- data.frame(type = "sitesFalse_1", sex = "female", gt = c("0/0", "0/1", "1/1") , prop = c(0, 0.5, 0.5))
# males F2 genotype is expected to stay the same , as it is produced from unfertilized egg, hence have no paternal inheritance
male_sitesReal <- data.frame(type = "sitesReal",sex = "male",gt = c("0/0", "0/1", "1/1"),prop = c(0.5, 0, 0.5))
male_sitesFalse_0 <- data.frame(type = "sitesFalse_0",sex = "male",gt = c("0/0", "0/1", "1/1"),prop = c(0.5, 0, 0.5))
male_sitesFalse_1 <- data.frame(type = "sitesFalse_1", sex = "male",gt = c("0/0", "0/1", "1/1"),prop = c(0.5, 0, 0.5))
expected_prop <- bind_rows(fem_sitesReal,fem_sitesFalse_0,fem_sitesFalse_1,male_sitesReal,male_sitesFalse_0,male_sitesFalse_1) %>% mutate(sex = as.character(sex))%>% mutate(gt = as.character(gt))
expected_prop <- bind_rows(fem_sitesReal,fem_sitesFalse_0,fem_sitesFalse_1,male_sitesReal,male_sitesFalse_0,male_sitesFalse_1) %>% mutate(sex = as.character(sex))%>% mutate(gt = as.character(gt))
# using on the total genotypes count of sites per sample, calculate the expected counts, and add them to the observed counts into a final dat table
expected <- observed %>%
mutate(gt = as.character(gt)) %>%
full_join(expected_prop, by = c("gt", "sex")) %>%
mutate(count = total*prop)
x <- observed %>%
dplyr::select(c("sample","sex","gt","total", "obs")) %>%
mutate(type = "Observed") %>%
dplyr::rename(count = obs) %>%
mutate(prop = (count/total))
dat <-  bind_rows(x, expected) %>%
dplyr::select(-obs)
View(dat)
dat$sample %>% unique() %>% count()
153*4
View(expected)
