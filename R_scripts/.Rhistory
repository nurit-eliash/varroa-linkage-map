layout(legend = list(orientation = "h", x = 0, y = -0.1))
# לא הצלחתי להפריד את הקו של הממוצע כך שיהיה קו נפרד לכל סקס.
# צריך לנסות להפריד,
# או , לעעשות פעמיים פאסט?
#this gives too much scattered data... hard to compare sexes
df %>%
filter(total>10) %>%
ggplot(aes(y =freq, x = sex, color = gt,
shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_jitter(width=0.1, size=2) +
scale_shape_manual(values=c(1,19)) +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
geom_hline(data= median, aes(yintercept = med_val)) +
facet_wrap( ~gt+sex)
##!!!!! *********************
## TRY##
# this gives a median for all sexes, per gt (too litlle lines..)
df %>%
filter(total>10) %>%
ggplot(aes(y =freq, x = sex, color = gt,
shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_jitter(width=0.1, size=2) +
scale_shape_manual(values=c(1,19)) +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
facet_wrap( ~gt) +
geom_hline(data= median, aes(yintercept = med_val, group = sex))
# this option gives a line for each dot... not median (too many lines)
df %>%
filter(total>10) %>%
ggplot(aes(y =freq, x = sex, color = gt,
shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_jitter(width=0.1, size=2) +
scale_shape_manual(values=c(1,19)) +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
#stat_summary(fun = "median", fun.min = "median", fun.max= "median", size= 0.3, geom = "crossbar") +
stat_summary(fun = "median", geom = "crossbar", group=df$sex)+
facet_wrap( ~gt)
# this option gives
df %>%
filter(total>10) %>%
ggplot(aes(y =freq, x = sex, color = gt,
shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_jitter(width=0.1, size=2) +
scale_shape_manual(values=c(1,19)) +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
geom_errorbar(data=median, aes(ymin = med_val, ymax = med_val)) +
facet_wrap( ~gt)
#this gives too much scattered data... hard to compare sexes
df %>%
filter(total>10) %>%
ggplot(aes(y =freq, x = sex, color = gt,
shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_jitter(width=0.1, size=2) +
scale_shape_manual(values=c(1,19)) +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
geom_hline(data= median, aes(yintercept = med_val)) +
facet_wrap( ~gt+sex)
# Prepare table with observed and expected counts, per family:
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "0/0")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
#  mutate(total = as.numeric(sum(n))) %>%
dplyr::rename(obs = n)
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
# replace "NA" with zero value when gt doesn't exists
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1"))) # add all possible genotypes
# 3d
data <- left_join(samples, observed, by=c("sample","gt")) %>%
replace(is.na(.),0) %>% # replace "NA" with zero value when gt doesn't exists
group_by(sample) %>%
mutate(total = as.numeric(sum(obs))) %>%
mutate(freq=obs/total) %>%
pivot_wider(names_from="gt", values_from=freq, id_cols=c(sample,total)) %>%
left_join(meta, by="sample") %>%
rename(homo_ref="0/0") %>%
rename(hetero="0/1") %>%
rename(homo_alt="1/1")
# 2d
df <- left_join(samples, observed, by=c("sample","gt")) %>%
replace(is.na(.),0) %>% # replace "NA" with zero value when gt doesn't exists
group_by(sample) %>%
mutate(total = as.numeric(sum(obs))) %>%
mutate(freq=round(obs/total, digit=2)) %>%
left_join(meta, by="sample")
p <- df %>%
filter(total>10) %>%
ggplot(aes(y =freq, x = sex, color = gt,
shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_jitter(width=0.1, size=2) +
scale_shape_manual(values=c(1,19)) +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic()  +
ggtitle('F2 offspring of F1 male (0/0) x female (0/1)') +
guides(color = "none") +
facet_wrap( ~gt)
ggplotly(p) %>%
layout(legend = list(orientation = "h", x = 0, y = -0.1))
df %>%
filter(total>10) %>%
ggplot(aes(y =freq, x = sex, color = gt,
shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_boxplot()
df %>%
filter(total>10) %>%
ggplot(aes(y =freq, x = sex, color = gt,
shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_boxplot() +
geom_jitter(width=0.1, size=2)
df %>%
filter(total>10) %>%
ggplot(aes(y =freq, x = sex, color = gt,
shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_boxplot() +
geom_jitter(width=0.1, size=2) +
scale_shape_manual(values=c(1,19)) +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
geom_hline(data= median, aes(yintercept = med_val)) +
facet_wrap( ~gt)
# לא הצלחתי להפריד את הקו של הממוצע כך שיהיה קו נפרד לכל סקס.
# צריך לנסות להפריד,
# או , לעעשות פעמיים פאסט?
df %>%
filter(total>10) %>%
ggplot(aes(y =freq, x = sex, color = gt,
shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_boxplot() +
geom_jitter(width=0.1, size=2) +
scale_shape_manual(values=c(1,19)) +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
facet_wrap( ~gt)
## example
set.seed(8)
y <- rnorm(200)
group <- sample(LETTERS[1:3], size = 200,
replace = TRUE)
df <- data.frame(y, group)
# 2d
df <- left_join(samples, observed, by=c("sample","gt")) %>%
replace(is.na(.),0) %>% # replace "NA" with zero value when gt doesn't exists
group_by(sample) %>%
mutate(total = as.numeric(sum(obs))) %>%
mutate(freq=round(obs/total, digit=2)) %>%
left_join(meta, by="sample")
## example
set.seed(8)
y <- rnorm(200)
group <- sample(LETTERS[1:3], size = 200,
replace = TRUE)
d <- data.frame(y, group)
View(d)
View(df)
# Box plot by group with jitter
ggplot(d, aes(x = group, y = y, colour = group)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()
ggplot(df, aes(x = sex, y = freq, colour = gt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()
ggplot(df, aes(x = sex, y = freq, colour = gt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width=0.1, size=2) +
facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") + facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") + facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
scale_shape_manual(values=c(1,19)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") + facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +   scale_shape_manual(values=c(1,19)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") + facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") + facet_wrap( ~gt)  +scale_shape_manual(values=c(1,19))
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters,
text = paste("sample:", sample,
", n:", total))) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") + facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") + facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters)) +
geom_boxplot(outlier.shape = NA) + scale_shape_manual(values=c(1,19)) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters)) +
geom_boxplot(outlier.shape = NA, coef=0) +
scale_shape_manual(values=c(1,19)) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
facet_wrap( ~gt)
df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters, text = paste("sample:", sample,
", n:", total))) +
geom_boxplot(outlier.shape = NA, coef=0) +
scale_shape_manual(values=c(1,19)) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
facet_wrap( ~gt)
p = df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters)) +
geom_boxplot(outlier.shape = NA, coef=0) +
scale_shape_manual(values=c(1,19)) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
facet_wrap( ~gt)
p = df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters)) +
geom_boxplot(outlier.shape = NA, coef=0) +
scale_shape_manual(values=c(1,19)) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
facet_wrap( ~gt)
ggplotly(p) %>%
layout(legend = list(orientation = "h", x = 0, y = -0.1))
# Prepare table with observed and expected counts, per family:
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "0/0")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/0")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
#  mutate(total = as.numeric(sum(n))) %>%
dplyr::rename(obs = n)
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
# replace "NA" with zero value when gt doesn't exists
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1"))) # add all possible genotypes
data <- left_join(samples, observed, by=c("sample","gt")) %>%
replace(is.na(.),0) %>% # replace "NA" with zero value when gt doesn't exists
group_by(sample) %>%
mutate(total = as.numeric(sum(obs))) %>%
mutate(freq=obs/total) %>%
pivot_wider(names_from="gt", values_from=freq, id_cols=c(sample,total)) %>%
left_join(meta, by="sample") %>%
rename(homo_ref="0/0") %>%
rename(hetero="0/1") %>%
rename(homo_alt="1/1")
head(data)
data %>%
plot_ly(x= ~homo_ref, y =~hetero, z = ~homo_alt,
color = ~sex,
colors = c("Egg"="#FFD301","Nymph"="#9BA4B5","female"="#EB455F","male"="#1982c4"),
symbol= ~adult_sisters,
symbols= c("with adult sister"="circle", "no adult sister"= "circle-open"),
text=~sample,
hoverinfo= "text") %>%
add_markers() %>%
layout(title = 'F2 offspring of F1 male (0/0) x female (0/0)',
scene = list(
xaxis = list(title = '0/0', nticks = 3, range = c(0,1)),
yaxis = list(title = '0/1', nticks = 3, range = c(0,1)),
zaxis = list(title = '1/1', nticks = 3, range = c(0,1))))
# 2d
df <- left_join(samples, observed, by=c("sample","gt")) %>%
replace(is.na(.),0) %>% # replace "NA" with zero value when gt doesn't exists
group_by(sample) %>%
mutate(total = as.numeric(sum(obs))) %>%
mutate(freq=round(obs/total, digit=2)) %>%
left_join(meta, by="sample")
p = df %>%
filter(total>10) %>%
ggplot(aes(x = sex, y = freq, colour = gt, shape = adult_sisters)) +
geom_boxplot(outlier.shape = NA, coef=0) +
scale_shape_manual(values=c(1,19)) +
geom_jitter() +
scale_color_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
theme_classic() +
ggtitle('F2 offspring of F1 male (0/0) x female (0/0)') +
guides(color = "none") +
facet_wrap( ~gt)
ggplotly(p) %>%
layout(legend = list(orientation = "h", x = 0, y = -0.1))
library("tidyverse")
library("plyr")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR") # for extracting genotype data from a vcf file
library("data.table")
library("stringr")
library("janitor")
library("plotly") # for the 3d plots
library("ggfortify")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 10,
fig.asp = 0.6,
out.width = "100%")
library("tidyverse")
library("plyr")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR") # for extracting genotype data from a vcf file
library("data.table")
library("stringr")
library("janitor")
library("plotly") # for the 3d plots
library("ggfortify")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 10,
fig.asp = 0.6,
out.width = "100%")
library("tidyverse")
library("plyr")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR") # for extracting genotype data from a vcf file
library("data.table")
library("stringr")
library("janitor")
library("plotly") # for the 3d plots
library("ggfortify")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 10,
fig.asp = 0.6,
out.width = "100%")
