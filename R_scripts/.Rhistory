data %>%
group_by(stimuli) %>%
#group_by(EO) %>%
get_summary_stats(response, type = "mean_sd")
# Prior to analysis, we gonna check the ANOVA assumptions:
str(data)
table(data$stimuli, data$EO)
install.packages("car")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(ggthemes)
library(stats)
library(moments)
library(grid)
library(formattable)
library(gridExtra)
library(ggsignif)
library(hrbrthemes)
library(plotrix)
library(rstatix)
library(car)
# run analysis for
my_anova <- aov(response ~ stimuli * EO, data = data)
my_anova
Anova(my_anova, type = "III")
lapply(split(data, data$EO), function(i){
anova(lm(response ~ stimuli, data = i))
})
anova_perEO <- lapply(split(data, data$EO), function(i){
anova(lm(response ~ stimuli, data = i))
})
anova_perEO$EO4309
table(data$stimuli, data$EO)
Anova(lm(response ~ stimuli, data = i, type = "III"))
lapply(split(data, data$EO), function(i){
Anova(lm(response ~ stimuli, data = i, type = "III"))
})
anova_perEO
lapply(split(data, data$EO), function(i){
Anova(lm(response ~ stimuli, data = i))
})
anova_perEO
lapply(split(data, data$EO), function(i){
shapiro_test(response, i)
})
data %>%
group_by(stimuli) %>%
shapiro_test(response)
shapiro_test(data$response)
split(data, data$EO)
function(i)
lapply(split(data, data$EO), function(i){
shapiro_test(data$i)
})
lapply(split(data, data$EO), function(i){
shapiro_test(data$i)
})
lapply(split(data, data$EO), function(i){
shapiro_test(data=i)
})
shapiro_test(i)
shapiro_test(response)
shapiro_test(response, data =i)
shapiro_test(response)
shapiro_test(data$response)
data %>%
group_by(stimuli) %>%
shapiro_test(response)
data %>%
split(EO) %>%
group_by(stimuli) %>%
shapiro_test(response)
data %>%
split(EO)
data %>%
split(data$EO)
data %>%
split(data$EO) %>%
group_by(stimuli) %>%
shapiro_test(response)
data %>%
split(data$EO) %>%
split(data$stimuli) %>%
shapiro_test(response)
split(data$stimuli)
split(data ,data$stimuli)
data %>%
group_by(EO)
data %>%
group_by(EO) %>%
group_map(stimuli)
data %>%
group_by(EO)
data %>%
group_by(EO) %>%
group_map(shapiro_test(response))
data %>%
group_by(EO) %>%
group_map(shapiro_test(data$response))
data %>%
group_by(EO) %>%
group_map(data, shapiro_test(data$response))
data %>%
group_by(EO) %>%
group_map(shapiro_test(data$response), data)
data %>%
split(data, EO)
data %>%
split(data$EO)
data %>%
split(data$EO) %>%
group_by(stimuli) %>%
group_map(shapiro_test(data$response), data)
shapiro_test(data$response)
data %>%
group_by(EO) %>%
shapiro_test(data$response)
data %>%
group_by(data$EO)
data %>%
group_by(data$EO) %>%
shapiro_test(data$response)
data %>%
group_by(EO)
data %>%
group_by(EO) %>%
shapiro_test(data$response)
data %>%
group_by(EO) %>%
shapiro_test(response)
data %>%
group_by(stimuli) %>%
shapiro_test(response)
data %>%
group_by(stimuli) %>%
group_by(EO) %>%
shapiro_test(response)
data %>%
group_by(stimuli,EO) %>%
shapiro_test(response)
View(normality)
normality <- data %>%
group_by(stimuli,EO) %>%
shapiro_test(response)
View(normality)
# Prior to analysis, we gonna check the ANOVA assumptions:
# (1) Outliers
data %>%
group_by(stimuli,EO) %>%
identify_outliers(response)
# Prior to analysis, we gonna check the ANOVA assumptions:
# (1) Outliers
Outliers <- data %>%
group_by(stimuli,EO) %>%
identify_outliers(response)
View(Outliers)
# plot it to detect outliers
data %>%
group_by(stimuli,EO) %>%
ggboxplot(x = "stimuli", y = "response")
# plot it to detect outliers
data %>%
group_by(EO) %>%
ggboxplot(x = "stimuli", y = "response")
data %>%
group_by(stimuli,EO) %>%
ggboxplot(x = "stimuli", y = "response")
# plot it to detect outliers
data %>%
group_by(EO) %>%
ggboxplot(x = "stimuli", y = "response", color = "EO")
# plot it to detect outliers
data %>%
# group_by(EO) %>%
ggboxplot(x = "stimuli", y = "response", color = "EO")
data %>%
group_by(stimuli,EO) %>%
ggboxplot(x = "stimuli", y = "response", color = "leg")
data %>%
group_by(stimuli,EO) %>%
shapiro_test(response)
data %>%
lm(response ~ group)
lm(response ~ group, data)
lm(response ~ stimuli, data)
lapply(split(data, data$EO), function(i){
lm(response ~ stimuli, data = i)
})
# (3) Homogneity of variance assumption
# Build the linear model
model <- lapply(split(data, data$EO), function(i){
lm(response ~ stimuli, data = i)
})
# Create a QQ plot of residuals
ggqqplot(residuals(model$EO4309))
plot(model$EO4309, 1)
# as we wish to know the difference in response to stimuli, in each EO, we will use one way Anova, after spliting the data per EO:
anova_perEO <- lapply(split(data, data$EO), function(i){
anova(lm(response ~ stimuli, data = i))
})
anova_perEO
tukey <- lapply(split(data, data$EO), function(i){
tukey_hsd(response ~ stimuli, data = i)
})
tukey_hsd(response ~ stimuli)
data %>%
group_by(stimuli,EO) %>%
tukey_hsd(response ~ stimuli)
data %>%
group_by(stimuli,EO) %>%
tukey_hsd(data, response ~ stimuli)
pwc <- data %>%
tukey_hsd(response ~ stimuli)
pwc
lapply(split(data, data$EO), function(i){
tukey_hsd(response ~ stimuli)
})
pwc <- data %>%
group_by(EO) %>%
tukey_hsd(response ~ stimuli)
pwc
tukey <- data %>%
group_by(EO) %>%
tukey_hsd(response ~ stimuli)
View(tukey)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(ggthemes)
library(stats)
library(moments)
library(grid)
library(formattable)
library(gridExtra)
library(ggsignif)
library(hrbrthemes)
library(plotrix)
library(rstatix)
library(car)
data <- read.csv("/Users/nuriteliash/Documents/GitHub/Sofia-varroa-project/EAG_data_all.csv")
# our data contains:
str(data)
table(data$stimuli, data$EO)
# Prior to analysis, we gonna check the ANOVA assumptions:
# (1) Outliers
Outliers <- data %>%
group_by(stimuli,EO) %>%
identify_outliers(response)
# plot it to detect outliers
# by specific leg
data %>%
ggboxplot(x = "stimuli", y = "response", color = "leg")
# (2) Normality: the dependent variable should be approximately normally distributed in each cell of the design. This can be checked using the Shapiro-Wilk normality test (shapiro_test()
normality <- data %>%
group_by(stimuli,EO) %>%
shapiro_test(response)
# looks like that for a few EO x stimuli combinations  the response doesnt distribute normally  (p<0.05)
# however, as we have enough replicates (n=10), it is ok to contniue with ANOVA
# (3) Homogneity of variance assumption
# Build the linear model
model <- lapply(split(data, data$EO), function(i){
lm(response ~ stimuli, data = i)
})
# now you can Create a QQ plot of residuals of each EO:
ggqqplot(residuals(model$EO4309))
plot(model$EO4309, 1)
################################################################################
# in my opinion, you should take take the entire leg, if you feels its an outlier, and then check again the normality
##########################################################
# as we wish to know the difference in response to stimuli, in each EO, we will use one way Anova, after spliting the data per EO:
anova_perEO <- lapply(split(data, data$EO), function(i){
anova(lm(response ~ stimuli, data = i))
})
anova_perEO
tukey
tukey <- data %>%
group_by(EO) %>%
tukey_hsd(response ~ stimuli)
View(tukey)
ggboxplot(data, x = "stimuli", y = "response")
lapply(split(data, data$EO), function(i){
ggboxplot(lm(response ~ stimuli, data = i))
})
lapply(split(data, data$EO), function(i){
ggboxplot(response ~ stimuli, data = i)
})
plots <- lapply(split(data, data$EO), function(i){
ggboxplot(response ~ stimuli, data = i)
})
data %>%
group_by(EO) %>%
ggboxplot(data, x = "stimuli", y = "response")
lapply(split(data, data$EO), function(i){
ggboxplot(response ~ stimuli, data = i)
})
ggplot(data, aes(x = "stimuli", y = "response", colour = "EO")) +
geom_point() +
facet_wrap( ~ EO)
ggplot(data, aes(x = "stimuli", y = "response", colour = "EO")) +
geom_point() +
facet_wrap( ~ "EO")
ggplot(data, aes(x = "stimuli", y = "response", colour = "EO")) +
geom_point() +
facet_wrap( ~ EO)
ggplot(data, aes(x = stimuli, y = response, colour = EO)) +
geom_point() +
facet_wrap( ~ EO)
ggplot(data, aes(x = stimuli, y = response, colour = EO)) +
geom_point() +
facet_wrap( ~ EO) +
theme_classic() +
ggtitle("Varroa foreleg response (mV) to stimuli of ___") +
xlab("Stimuli amount (microgram)") +
ylab("Response (mV)")
to essential oil stimuli") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)")
ggplot(data, aes(x = stimuli, y = response, colour = EO)) +
geom_point() +
facet_wrap( ~ EO) +
theme_classic() +
ggtitle("Varroa foreleg response
to essential oil stimuli") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)")
to essential oil stimuli") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)")
ggplot(data, aes(x = stimuli, y = response, colour = EO)) +
geom_point() +
facet_wrap( ~ EO) +
theme_classic() +
ggtitle("Varroa foreleg response
to essential oil stimuli") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)")
ggplot(data, aes(x = stimuli, y = response, colour = EO)) +
geom_point() +
facet_wrap( ~ EO) +
theme_classic() +
ggtitle("Varroa foreleg response
to essential oil stimuli") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)")
ggplot(data, aes(x = stimuli, y = response, colour = EO)) +
geom_boxplot() +
facet_wrap( ~ EO) +
theme_classic() +
ggtitle("Varroa foreleg response
to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)")
ggplot(data, aes(x = stimuli, y = response, colour = EO)) +
geom_point() +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response
to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)")
ggplot(data, aes(x = stimuli, y = response, colour = EO)) +
geom_boxplot() +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response
to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)")
ggplot(data, aes(x = stimuli, y = response, colour = EO)) +
geom_boxplot() +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)")
# first sort the order of stimuli
data$stimuli <- factor(data$stimuli,levels = c("acet_before", "0.1", "0.25", "0.5", "1", "2.5", "5","acet_after"))
ggplot(data, aes(x = stimuli, y = response, colour = EO)) +
geom_boxplot() +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)")
ggplot(data, aes(x = stimuli, y = response, colour = EO)) +
geom_boxplot() +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)") +
theme(axis.text.x=element_text(angle=45, hjust=1))
model
plot(model$EO4309, 1)
plot(model, 1) +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)") +
theme(axis.text.x=element_text(angle=45, hjust=1))
model
View(model)
model_table <- model %>%
as_data_frame()
plot(unlist(model), 1) +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)") +
theme(axis.text.x=element_text(angle=45, hjust=1))
unlist(model)
# our data contains:
str(data)
library(plotly)
p <-ggplot(data, aes(x = stimuli, y = response, colour = EO)) +
geom_boxplot() +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplotly(p)
p <-ggplot(data, aes(x = stimuli, y = response, colour = EO, leg=leg)) +
geom_boxplot() +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplotly(p, tooltip = c("leg", "EO"))
p <-ggplot(data, aes(x = stimuli, y = response, colour = EO, lable=leg)) +
geom_boxplot() +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplotly(p)
ggplot(data, aes(x = stimuli, y = response, colour = EO, lable=leg)) +
geom_boxplot() +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplotly(p, tooltip = "leg")
p <-ggplot(data, aes(x = stimuli, y = response, colour = EO, leg = leg)) +
geom_boxplot() +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplotly(p, tooltip = "leg")
install.packages("plotly")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(ggthemes)
library(stats)
library(moments)
library(grid)
library(formattable)
library(gridExtra)
library(ggsignif)
library(hrbrthemes)
library(plotrix)
library(rstatix)
library(car)
library(plotly)
p <-ggplot(data, aes(x = stimuli, y = response, colour = EO, leg = leg)) +
geom_boxplot() +
facet_wrap( ~ EO) +
theme_linedraw() +
ggtitle("Varroa foreleg response to different essential oils") +
xlab("Stimuli amount (microgram)") +
ylab("Normalized response (%)") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplotly(p, tooltip = "leg")
library("tidyverse")
library("dplyr")
library("ggplot2")
library("ggpubr")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR")
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("plyr")
library("rstatix")
vcf <- read.vcfR("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/five_fam.Q40BIALLDP16HDP40mis.5Chr7/five_fam.Q40BIALLDP16HDP40mis.5Chr7.recode.vcf", verbose = FALSE )
vcf
# extract the genotype for each site in each individual
gt <- extract.gt(vcf, element = "GT")
gt <- as.data.frame(t(gt)) %>%
rownames_to_column("sample")
