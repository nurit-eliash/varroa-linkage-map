library("gridExtra")
library("grid")
library("GGally")
library("vcfR")
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("plyr")
library("rstatix")
library("freqtables")
library("fuzzyjoin") # to join tables based on a string in a column
library("broom")
# library("aspi") - Repeated G–tests of Goodness-of-Fit, work only for 2 variables...
library("DescTools") # for the Goodness-of-Fit
install.packages("DescTools")
library("tidyverse")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR")
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("plyr")
library("rstatix")
library("freqtables")
library("fuzzyjoin") # to join tables based on a string in a column
library("broom")
# library("aspi") - Repeated G–tests of Goodness-of-Fit, work only for 2 variables...
library("DescTools") # for the Goodness-of-Fit
install.packages("DescTools")
library("tidyverse")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR")
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("plyr")
library("rstatix")
library("freqtables")
library("fuzzyjoin") # to join tables based on a string in a column
library("broom")
# library("aspi") - Repeated G–tests of Goodness-of-Fit, work only for 2 variables...
library("DescTools") # for the Goodness-of-Fit
install.packages("DescTools")
if (!require("remotes")) install.packages("remotes")
remotes::install_github("AndriSignorell/DescTools")
library("tidyverse")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR")
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("plyr")
library("rstatix")
library("freqtables")
library("fuzzyjoin") # to join tables based on a string in a column
library("broom")
# library("aspi") - Repeated G–tests of Goodness-of-Fit, work only for 2 variables...
library("DescTools") # for the Goodness-of-Fit
install.packages("RVAideMemoire")
library(RVAideMemoire)
install.packages('RVAideMemoire')
install.packages("RVAideMemoire")
install.packages("RVAideMemoire")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mixOmics")
install.packages("RVAideMemoire")
library(RVAideMemoire)
vcf
gt
df
View(df)
dot
g.test(Data)
G.test(Data)
GTest(Data)
library("tidyverse")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR")
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("plyr")
library("rstatix")
library("freqtables")
library("fuzzyjoin") # to join tables based on a string in a column
library("broom")
# library("aspi") - Repeated G–tests of Goodness-of-Fit, work only for 2 variables...
library("DescTools") # for the Goodness-of-Fit
library(RVAideMemoire)
GTest(Data)
class(Data)
Data = read.table(textConnection(Input),header=TRUE) %>%
mutate(S = 10) %>%
as.matrix()
GTest(Data)
Data
View(Data)
Data = read.table(textConnection(Input),header=TRUE) %>%
mutate(S = 10) %>%
column_to_rownames()
Data = read.table(textConnection(Input),header=TRUE) %>%
mutate(S = 10) %>%
column_to_rownames("Ethnic.group")
Data
GTest(Data)
Data %>%
rowwise() %>%
GTest()
Data %>%
dplyr::rowwise() %>%
GTest()
Data %>%
# dplyr::rowwise() %>%
GTest()
G.theo.multcomp(Data)
View(df)
View(cross_0.0_0.1)
View(df)
#  combine the observed and the expected counts
cross_0.0_0.1 <- bind_rows(obs, exp)
cross_0.0_0.1
chi_p <- full_join(obs, exp, by= c("sample", "gt")) %>%
dplyr::select(c(sample ,n.x, n.y)) %>%
dplyr::rename(obs = n.x, exp = n.y) %>%
drop_na()
View(chi_p)
Data %>%
# dplyr::rowwise() %>%
GTest(chi_p)
GTest(chi_p)
chi_p
View(Data)
chi_p %>%
column_to_rownames("sample") %>%
# dplyr::rowwise() %>%
GTest()
chi_p %>%
column_to_rownames("sample")
chi_p %>%
column_to_rownames("sample") %>%
G.theo.multcomp(chi_p$obs, chi_p$exp)
mendel
obs
gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2"))
# make a table with the observed counts for F2 and CI for the proportion
gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>% view()
# make a table with the observed counts for F2 and CI for the proportion
gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>% view()
# make a table with the observed counts for F2 and CI for the proportion
gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE)
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE)
summary(d)
gt_502 <- gt %>%
dplyr::filter(grepl("502", sample)) %>%
t() %>%
as.data.frame() %>%
row_to_names(row_number = 1)
gt_502
View(gt_502)
summary(d)
# change the sample name to a general name:
colnames(gt_502)[grepl('fnd',colnames(gt_502))] <- 'F0_fem'
colnames(gt_502)[grepl('_son_',colnames(gt_502))] <- 'F1_male'
colnames(gt_502)[grepl('_grnson',colnames(gt_502))] <- 'F2_male'
colnames(gt_502)[grepl('_dat',colnames(gt_502))] <- 'F1_fem_1'
colnames(gt_502)[grepl('_sis',colnames(gt_502))] <- 'F1_fem_2'
colnames(gt_502)[grepl('a_grndat',colnames(gt_502))] <- 'F2_fem_1'
colnames(gt_502)[grepl('f_grndat',colnames(gt_502))] <- 'F2_fem_2'
colnames(gt_502)[grepl('c_grn_',colnames(gt_502))] <- 'F2_3'
colnames(gt_502)[grepl('e_grn_',colnames(gt_502))] <- 'F2_4'
colnames(gt_502)[grepl('d_grn_',colnames(gt_502))] <- 'F2_5'
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE)
summary(d)
d$sample
d$gt
View(d)
gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt)
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt)
gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE)
chi_p %>%
G.theo.multcomp(chi_p$obs, chi_p$exp)
exp
d
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>% view()
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(sample %in% c("0/0", "1/1", "0/1")) %>% view()
gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE)
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE)
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>% view()
d
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(name) %>%
mutate(total = as.numeric(sum(n))) %>% view()
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>% view()
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2")) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>% view()
# state the expected site proportion of each genotype and sex under a perfect mendelian segregation of F2
fem_exp <- data.frame(sample = "fem", gt = c("0/0", "0/1", "1/1") , prop = c(0.5, 0.5,0))
male_exp <- data.frame(sample = "F2_male",gt = c("0/0", "0/1", "1/1"),prop = c(0.5, 0,0.5))
mendel <- bind_rows(fem_exp,male_exp) %>% mutate(sample = as.character(sample))%>% mutate(gt = as.character(gt))
mendel
gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains("F2_male" & "F2_fem"))
gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains(c("F2_male" , "F2_fem")))
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains(c("F2_male" , "F2_fem"))) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
view()
mendel
d
df <- data.frame(x = c(NA, "x.y", "x.z", "y.z"))
df %>% separate(x, c("A", "B"))
df <- data.frame(x = c(NA, "x.y", "x.z", "y.z"))
df
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains(c("F2_male" , "F2_fem"))) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(sex = str_extract(sample, "[^_]+$"))
gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains(c("F2_male" , "F2_fem"))) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(sex = str_extract(sample, "[^_]+[_$]"))
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains(c("F2_male" , "F2_fem"))) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(fam = str_extract(sample, "[^_]+")) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat|fnd|sis", sample) ~ "female",
grepl( "_grn_",sample) ~ "ND"))
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains(c("F2_male" , "F2_fem"))) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(fam = str_extract(sample, "[^_]+")) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat|fnd|sis", sample) ~ "female",
grepl( "_grn_",sample) ~ "ND"))
library("tidyverse")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR")
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("plyr")
library("rstatix")
library("freqtables")
library("fuzzyjoin") # to join tables based on a string in a column
library("broom")
# library("aspi") - Repeated G–tests of Goodness-of-Fit, work only for 2 variables...
library("DescTools") # for the Goodness-of-Fit
library("RVAideMemoire")
install.packages("tidyverse")
library("tidyverse")
library("plyr")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR")
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("rstatix")
library("freqtables")
library("fuzzyjoin") # to join tables based on a string in a column
library("broom")
# library("aspi") - Repeated G–tests of Goodness-of-Fit, work only for 2 variables...
library("DescTools") # for the Goodness-of-Fit
library("RVAideMemoire")
# make a table with the observed counts for F2 and CI for the proportion
d <- gt_502 %>%
filter(F1_male == "0/0" & F1_fem_1 == "0/1") %>%
select(contains(c("F2_male" , "F2_fem"))) %>%
pivot_longer(everything()) %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(fam = str_extract(sample, "[^_]+")) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat|fnd|sis", sample) ~ "female",
grepl( "_grn_",sample) ~ "ND"))
library("tidyverse")
library("plyr")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR")
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("rstatix")
library("freqtables")
library("fuzzyjoin") # to join tables based on a string in a column
library("broom")
# library("aspi") - Repeated G–tests of Goodness-of-Fit, work only for 2 variables...
library("DescTools") # for the Goodness-of-Fit
library("RVAideMemoire")
loadNamespace("tidyverse"
loadNamespace("tidyverse")
loadNamespace(tidyverse)
library("tidyverse")
library("plyr")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR")
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("rstatix")
library("freqtables")
library("fuzzyjoin") # to join tables based on a string in a column
library("broom")
# library("aspi") - Repeated G–tests of Goodness-of-Fit, work only for 2 variables...
library("DescTools") # for the Goodness-of-Fit
library("RVAideMemoire")
