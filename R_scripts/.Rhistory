parthenogenesis",
"Sexual" = "Sexual
reproduction","Automixis" = "Diploid
parthenogenesis
(Automixis)", "Female" = "14 Females
2,465 sites", "Male" = "14 males
1,949 sites")) + # change the x axis text to be more informative:
theme(legend.position = "right",
strip.text.x = element_text(angle = 0, hjust = 0)) +
facet_grid(.~class, scales = 'free',space = 'free',drop = F,
labeller = my_strip_labels) # add labels
#only observed
df_01_00 %>% dplyr::filter(class == "Observed") %>%
ggplot(aes(fill=gt, y=prop, x=type)) +
geom_bar(position="fill", stat="identity", ) +
ylab("Genotype proportion") +
# labs(title = "F2 genotype, crossing (0/1) male x (0/0) Female") +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
strip.text.x = element_text(size = 12)) +
scale_fill_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
scale_x_discrete(breaks=c("Female","Male"),
labels=c(paste(filter(pooled_obs_count_01_00, sex == 'Female')$count_sample, " Females,\n",
filter(pooled_obs_count_01_00, sex == 'Female')$sites, "sites"),
paste(filter(pooled_obs_count_01_00, sex == 'Male')$count_sample, " males,\n",
filter(pooled_obs_count_01_00, sex == 'Male')$sites, "sites")))
# just plot the legend, for the figure
df_01_00 %>%
dplyr::filter(class == "Observed") %>%
ggplot(aes(fill=gt, y=prop, x=type)) +
geom_bar(position="fill", stat="identity") +
ylab("Genotype proportion") +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
strip.text.x = element_text(size = 12),
legend.position = "bottom") +  # move legend to the bottom
scale_fill_manual(values=c("#ffbf00", "#66b032","#1982c4")) +
scale_x_discrete(breaks=c("Female","Male"),
labels=c(paste(filter(pooled_obs_count_01_00, sex == 'Female')$count_sample, " Females,\n",
filter(pooled_obs_count_01_00, sex == 'Female')$sites, "sites"),
paste(filter(pooled_obs_count_01_00, sex == 'Male')$count_sample, " males,\n",
filter(pooled_obs_count_01_00, sex == 'Male')$sites, "sites")))
df_01_00 %>%
dplyr::filter(class == "Observed") %>%
ggplot(aes(fill = gt, y = prop, x = type)) +
geom_bar(position = "fill", stat = "identity") +
ylab("Genotype proportion") +
labs(fill = "Genotype") +
theme_classic() +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
strip.text.x = element_text(size = 12),
legend.position = "bottom"
) +
scale_fill_manual(
values = c("#ffbf00", "#66b032", "#1982c4"),
labels = c("A/A", "A/B", "B/B")
) +
scale_x_discrete(
breaks = c("Female", "Male"),
labels = c(
paste(
filter(pooled_obs_count_01_00, sex == 'Female')$count_sample,
" Females,\n",
filter(pooled_obs_count_01_00, sex == 'Female')$sites,
"sites"
),
paste(
filter(pooled_obs_count_01_00, sex == 'Male')$count_sample,
" males,\n",
filter(pooled_obs_count_01_00, sex == 'Male')$sites,
"sites"
)
)
)
df_01_00 %>%
dplyr::filter(class == "Observed") %>%
ggplot(aes(fill = gt, y = prop, x = type)) +
geom_bar(position = "fill", stat = "identity") +
ylab("Genotype proportion") +
labs(fill = "Genotype") +
theme_classic() +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
strip.text.x = element_text(size = 12),
legend.position = "bottom"
) +
scale_fill_manual(
values = c("#ffbf00", "#66b032", "#1982c4"),
labels = c("AA", "AB", "BB")
) +
scale_x_discrete(
breaks = c("Female", "Male"),
labels = c(
paste(
filter(pooled_obs_count_01_00, sex == 'Female')$count_sample,
" Females,\n",
filter(pooled_obs_count_01_00, sex == 'Female')$sites,
"sites"
),
paste(
filter(pooled_obs_count_01_00, sex == 'Male')$count_sample,
" males,\n",
filter(pooled_obs_count_01_00, sex == 'Male')$sites,
"sites"
)
)
)
df_01_00 %>%
dplyr::filter(class == "Observed") %>%
ggplot(aes(fill = gt, y = prop, x = type)) +
geom_bar(position = "fill", stat = "identity") +
ylab("Genotype proportion") +
labs(fill = "Genotype") +
theme_classic() +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
strip.text.x = element_text(size = 12),
legend.position = "bottom"
) +
scale_fill_manual(
values = c("#ffbf00", "#66b032", "#1982c4"),
labels = c("AA", "AB", "BB"),
guide = guide_legend(label.position = "top")  # Position legend labels on top of the colored squares
) +
scale_x_discrete(
breaks = c("Female", "Male"),
labels = c(
paste(
filter(pooled_obs_count_01_00, sex == 'Female')$count_sample,
" Females,\n",
filter(pooled_obs_count_01_00, sex == 'Female')$sites,
"sites"
),
paste(
filter(pooled_obs_count_01_00, sex == 'Male')$count_sample,
" males,\n",
filter(pooled_obs_count_01_00, sex == 'Male')$sites,
"sites"
)
)
)
df_01_00 %>%
dplyr::filter(class == "Observed") %>%
ggplot(aes(fill = gt, y = prop, x = type)) +
geom_bar(position = "fill", stat = "identity") +
ylab("Genotype proportion") +
labs(fill = "Genotype:") +
theme_classic() +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
strip.text.x = element_text(size = 12),
legend.position = "bottom"
) +
scale_fill_manual(
values = c("#ffbf00", "#66b032", "#1982c4"),
labels = c("AA", "AB", "BB"),
guide = guide_legend(label.position = "top")  # Position legend labels on top of the colored squares
) +
scale_x_discrete(
breaks = c("Female", "Male"),
labels = c(
paste(
filter(pooled_obs_count_01_00, sex == 'Female')$count_sample,
" Females,\n",
filter(pooled_obs_count_01_00, sex == 'Female')$sites,
"sites"
),
paste(
filter(pooled_obs_count_01_00, sex == 'Male')$count_sample,
" males,\n",
filter(pooled_obs_count_01_00, sex == 'Male')$sites,
"sites"
)
)
)
df_01_00 %>%
dplyr::filter(class == "Observed") %>%
ggplot(aes(fill = gt, y = prop, x = type)) +
geom_bar(position = "fill", stat = "identity") +
ylab("Genotype proportion") +
labs(fill = "Genotype:") +
theme_classic() +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
strip.text.x = element_text(size = 12),
legend.position = "right"
) +
scale_fill_manual(
values = c("#ffbf00", "#66b032", "#1982c4"),
labels = c("AA", "AB", "BB"),
guide = guide_legend(label.position = "top")  # Position legend labels on top of the colored squares
) +
scale_x_discrete(
breaks = c("Female", "Male"),
labels = c(
paste(
filter(pooled_obs_count_01_00, sex == 'Female')$count_sample,
" Females,\n",
filter(pooled_obs_count_01_00, sex == 'Female')$sites,
"sites"
),
paste(
filter(pooled_obs_count_01_00, sex == 'Male')$count_sample,
" males,\n",
filter(pooled_obs_count_01_00, sex == 'Male')$sites,
"sites"
)
)
)
df_01_00 %>%
dplyr::filter(class == "Observed") %>%
ggplot(aes(fill = gt, y = prop, x = type)) +
geom_bar(position = "fill", stat = "identity") +
ylab("Genotype proportion") +
labs(fill = "Genotype:") +
theme_classic() +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
strip.text.x = element_text(size = 12),
legend.position = "right"
) +
scale_fill_manual(
values = c("#ffbf00", "#66b032", "#1982c4"),
labels = c("AA", "AB", "BB"),
guide = guide_legend(label.position = "right")  # Position legend labels on top of the colored squares
) +
scale_x_discrete(
breaks = c("Female", "Male"),
labels = c(
paste(
filter(pooled_obs_count_01_00, sex == 'Female')$count_sample,
" Females,\n",
filter(pooled_obs_count_01_00, sex == 'Female')$sites,
"sites"
),
paste(
filter(pooled_obs_count_01_00, sex == 'Male')$count_sample,
" males,\n",
filter(pooled_obs_count_01_00, sex == 'Male')$sites,
"sites"
)
)
)
```{r}
data <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa_ploidy/data/ploidy.csv") %>%
dplyr::mutate(Family = as.character(Family)) %>%
dplyr::mutate(stage_mature = case_when(
grepl("adult", Stage) ~ "Mature",
!grepl("adult", Stage) ~ "Imature"))
# count the mites in each stage and sex
ploidy_summary = data %>%
dplyr::filter(body.part == "Body") %>%
group_by(Sex, stage_mature) %>%
mutate(count_sample = n_distinct(record_number)) %>% #count each smaple once
select(c(Sex,stage_mature,count_sample)) %>%
unique()
ploidy_summary
# change the labales
my_strip_labels <- as_labeller(c(
"Imature" = "Imature mites
n = 37",
"Mature" = "Mature mites
n = 38"))
# histogram plot:
p_ploidy_hist = data %>% dplyr::filter(body.part == "Body") %>%
ggplot(aes(x=Ploidy, color = Sex, fill = Sex)) +
geom_histogram(position="dodge") +
geom_density(alpha=.2) +
ylab("Count") +
theme_classic2() +
theme(legend.position = "none") +
ggtitle("Varroa mite ploidy count
Flow-cytometry") +
facet_grid(.~stage_mature, space = 'free',drop = F,
labeller = my_strip_labels) # add labels
# density plot:
p_ploidy_dens = data %>% dplyr::filter(body.part == "Body") %>%
ggplot(aes(x=Ploidy, color = Sex, fill = Sex)) +
# geom_histogram(position="dodge") +
geom_density(alpha=.2) +
ylab("Density") +
theme_classic2() +
theme(legend.position = "none") +
ggtitle("Varroa mite ploidy
Flow-cytometry") +
facet_grid(.~stage_mature, space = 'free',drop = F,
labeller = my_strip_labels) # add labels
#density plot with rug
p_ploidy_dens_rug = data %>% dplyr::filter(body.part == "Body") %>%
ggplot(aes(x=Ploidy, color = Sex, fill = Sex)) +
geom_density(alpha=.2) +
geom_rug(aes(x=Ploidy,color = Sex), alpha=0.9, size=1.5,length = unit(0.05, "npc"))+
ylab("Density") +
theme_classic2() +
theme(legend.position = "none") +
ggtitle("Varroa mite ploidy
Flow-cytometry") +
facet_grid(.~stage_mature, space = 'free',drop = F,
labeller = my_strip_labels) # add labels
# or , plot only mature mites (with a help from ChatGPT)
data %>%
dplyr::filter(body.part == "Body") %>%
dplyr::filter(stage_mature == "Mature") %>%
ggplot(aes(x=Ploidy, color = Sex, fill = Sex)) +
geom_density(alpha=.2) +
geom_rug(aes(x=Ploidy,color = Sex), alpha=0.9, size=1.5,length = unit(0.05, "npc"))+
ylab("Density") +
theme_classic2() +
theme(legend.position = "bottom") +
ggtitle("Varroa mite ploidy flow-cytometry") +
geom_vline(xintercept = 2.25, color = "red", linetype = "dashed") + # Make this dashed
geom_vline(xintercept = 1.63, color = "blue", linetype = "dashed") + # Make this dashed
scale_fill_manual(values = c("red", "blue"),
labels = c("Females (14)", "Males (10)")) +
scale_color_manual(values = c("red", "blue"),
labels = c("Females (14)", "Males (10)")) +
guides(fill = guide_legend(title = NULL, reverse = TRUE),
color = guide_legend(title = NULL, reverse = TRUE))
p_ploidy_dens_rug
ggplotly(p_fam_body)
data <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa_Ploidy/data/Ploidy.csv") %>%
dplyr::mutate(Family = as.character(Family)) %>%
dplyr::mutate(stage_mature = case_when(
grepl("adult", Stage) ~ "Mature",
!grepl("adult", Stage) ~ "Imature"))
# order the levels
data$body.part <- factor(data$body.part, level=c("Body", "Anterior", "Posterior", "Legs","Hemolymph","Ovary","Testes"))
data$Stage <- factor(data$Stage, level=c("Larvae", "Protonymph", "Deuteronymph", "adult"))
data$Stage_original <- factor(data$Stage_original, level=c("Mom", "Son", "Mature","Daughter", "Deuteronymph", "Protonymph", "Larvae", "Immature"))
levels(data$Family) <- c(levels(data$Family), 0)
data$Family <- factor(data$Family, level= c("0", "1", "11","27","3","2","4", "5"))
p_family_adults = data %>% dplyr::filter(body.part %in% c("Body", "Ovary","Testes")) %>%
dplyr::filter(Stage == "adult") %>%
mutate_at("Family", ~replace_na(.,"0")) %>%
ggplot(aes(y=Ploidy, x=Sex, fill = Sex, lable = Stage)) +
geom_boxplot(outlier.shape = NA, coef=0 ) +  theme_classic() +  geom_jitter(width=0.1, size=2) +
facet_wrap(~body.part ) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.border=element_rect(colour="black",size=1, fill = NA))+
ggtitle('Mite ploidy in differnet body parts') +  ylim(0, 3)
p_fam_body = data %>% dplyr::filter(body.part == "Body") %>%
dplyr::filter(Stage %in% c("Larvae", "Protonymph", "Deuteronymph", "adult")) %>%
ggplot(aes(y=Ploidy, x=Sex, fill = Sex, lable = Stage)) +
geom_boxplot(outlier.shape = NA, coef=0 ) +  theme_classic() +  geom_jitter(width=0.1, size=2) +
facet_wrap(~Stage, nrow = 1 ) +
ggtitle('Mite Ploidy in whole body, in differnet developmental stage') +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.border=element_rect(colour="black",size=1, fill = NA))+
theme(legend.position='right')+  ylim(0, 3)
ggplotly(p_fam_body)
ggplotly(p_family_adults)
ggplotly(p_fam_body)
ggplotly(p_family_adults)
data %>%
dplyr::filter(body.part == "Body") %>%
dplyr::filter(stage_mature == "Mature") %>%
ggplot(aes(x=Ploidy, color = Sex, fill = Sex)) +
geom_histogram(position="dodge") +
geom_density(alpha=.2) +
ylab("Count") +
theme_classic2() +
theme(legend.position = "bottom") +
ggtitle("Varroa mite ploidy flow-cytometry") +
geom_vline(xintercept = 2.25, color = "red", linetype = "dashed") + # Make this dashed
geom_vline(xintercept = 1.63, color = "blue", linetype = "dashed") + # Make this dashed
scale_fill_manual(values = c("red", "blue"),
labels = c("Females (14)", "Males (10)")) +
scale_color_manual(values = c("red", "blue"),
labels = c("Females (14)", "Males (10)")) +
guides(fill = guide_legend(title = NULL, reverse = TRUE),
color = guide_legend(title = NULL, reverse = TRUE))
# or , plot only mature mites (with a help from ChatGPT)
data %>%
dplyr::filter(body.part == "Body") %>%
dplyr::filter(stage_mature == "Mature") %>%
ggplot(aes(x=Ploidy, color = Sex, fill = Sex)) +
geom_density(alpha=.2) +
geom_rug(aes(x=Ploidy,color = Sex), alpha=0.9, size=1.5,length = unit(0.05, "npc"))+
ylab("Density") +
theme_classic2() +
theme(legend.position = "bottom") +
ggtitle("Varroa mite ploidy flow-cytometry") +
geom_vline(xintercept = 2.25, color = "red", linetype = "dashed") + # Make this dashed
geom_vline(xintercept = 1.63, color = "blue", linetype = "dashed") + # Make this dashed
scale_fill_manual(values = c("red", "blue"),
labels = c("Females (14)", "Males (10)")) +
scale_color_manual(values = c("red", "blue"),
labels = c("Females (14)", "Males (10)")) +
guides(fill = guide_legend(title = NULL, reverse = TRUE),
color = guide_legend(title = NULL, reverse = TRUE))
data %>% dplyr::filter(body.part == "Body") %>%
ggplot(aes(x=Ploidy, color = Sex, fill = Sex)) +
geom_density(alpha=.2) +
geom_rug(aes(x=Ploidy,color = Sex), alpha=0.9, size=1.5,length = unit(0.05, "npc"))+
ylab("Density") +
theme_classic2() +
theme(legend.position = "none") +
ggtitle("Varroa mite ploidy
Flow-cytometry") +
facet_grid(.~stage_mature, space = 'free',drop = F,
labeller = my_strip_labels) # add labels
data %>% dplyr::filter(body.part == "Body") %>%
ggplot(aes(x=Ploidy, color = Sex, fill = Sex)) +
geom_density(alpha=.2) +
geom_rug(aes(x=Ploidy,color = Sex), alpha=0.9, size=1.5,length = unit(0.05, "npc"))+
ylab("Density") +
theme_classic2() +
theme(legend.position = "none") +
ggtitle("Varroa mite ploidy
Flow-cytometry") +
facet_grid(.~stage_mature, space = 'free',drop = F,
labeller = my_strip_labels) # add labels
ggplotly(p_family_adults)
ggplotly(p_fam_body)
ggarrange(p_ploidy_dens_rug, p_karyo_dens_rug, labels = c("A", "B"),
common.legend = TRUE, legend = "bottom",  widths = c(1, 0.65))
p_ploidy_dens_rug
# or , plot only mature mites (with a help from ChatGPT)
data %>%
dplyr::filter(body.part == "Body") %>%
dplyr::filter(stage_mature == "Mature") %>%
ggplot(aes(x=Ploidy, color = Sex, fill = Sex)) +
geom_density(alpha=.2) +
geom_rug(aes(x=Ploidy,color = Sex), alpha=0.9, size=1.5,length = unit(0.05, "npc"))+
ylab("Density") +
theme_classic2() +
theme(legend.position = "bottom") +
ggtitle("Varroa mite ploidy flow-cytometry") +
geom_vline(xintercept = 2.25, color = "red", linetype = "dashed") + # Make this dashed
geom_vline(xintercept = 1.63, color = "blue", linetype = "dashed") + # Make this dashed
scale_fill_manual(values = c("red", "blue"),
labels = c("Females (14)", "Males (10)")) +
scale_color_manual(values = c("red", "blue"),
labels = c("Females (14)", "Males (10)")) +
guides(fill = guide_legend(title = NULL, reverse = TRUE),
color = guide_legend(title = NULL, reverse = TRUE))
data %>%
dplyr::filter(body.part == "Body") %>%
dplyr::filter(stage_mature == "Mature") %>%
ggplot(aes(x=Ploidy, color = Sex, fill = Sex)) +
geom_histogram(position="dodge") +
geom_density(alpha=.2) +
ylab("Count") +
theme_classic2() +
theme(legend.position = "bottom") +
ggtitle("Varroa mite ploidy flow-cytometry") +
geom_vline(xintercept = 2.25, color = "red", linetype = "dashed") + # Make this dashed
geom_vline(xintercept = 1.63, color = "blue", linetype = "dashed") + # Make this dashed
scale_fill_manual(values = c("red", "blue"),
labels = c("Females (14)", "Males (10)")) +
scale_color_manual(values = c("red", "blue"),
labels = c("Females (14)", "Males (10)")) +
guides(fill = guide_legend(title = NULL, reverse = TRUE),
color = guide_legend(title = NULL, reverse = TRUE))
qual_var <- read_delim("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/Q40BIALLDP16HDP40mis.5Chr7/Q40BIALLDP16HDP40mis.5Chr7.lqual", delim = "\t",
col_names = c("chr", "pos", "qual"), skip = 1) %>%
unite(site, c("chr", "pos"))
ggplot(qual_var, aes(qual)) +
geom_density(fill = "dodgerblue1", colour = "black", alpha = 0.3) + theme_classic2() +
ggtitle("Variant quality distribution") +
scale_x_continuous(n.breaks = 12) +
theme(axis.text.x=element_text(angle=90,hjust=1)) +
xlab("Variant quality") +
ylab("Density") +
geom_vline(xintercept = 15000, color = "red")
df_00_01 %>% dplyr::filter(class == "Observed") %>%
dplyr::filter(type == "Male") %>% dplyr::filter(gt == "0/1") %>%
stat.desc() %>%
rownames_to_column("parameter") %>%
dplyr::filter(parameter == "sum") %>%
dplyr::mutate(prop = n/total)
#only observed
df_00_01 %>% dplyr::filter(class == "Observed") %>%
ggplot(aes(fill=gt, y=prop, x=type)) +
geom_bar(position="fill", stat="identity", ) +
ylab("Genotype proportion") +
labs(title = "Offspring genotype, crossing (0/0) male x (0/1) Female") +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
strip.text.x = element_text(size = 12)) +
scale_fill_manual(values=c("#ffbf00", "#66b032","#1982c4"))+
scale_x_discrete(breaks=c("Female","Male"),
labels=c(paste(filter(pooled_obs_count_00_01, sex == 'Female')$count_sample, " Females,\n",
filter(pooled_obs_count_00_01, sex == 'Female')$sites, "sites"),
paste(filter(pooled_obs_count_00_01, sex == 'Male')$count_sample, " males,\n",
filter(pooled_obs_count_00_01, sex == 'Male')$sites, "sites")))
