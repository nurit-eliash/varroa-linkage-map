ggplot(aes(x=chromo_number, color = Sex, fill = Sex)) +
geom_rug(col="steelblue",alpha=0.9, size=1.5)+
geom_density(alpha=.2) +
ylab("Density") +
xlab("Chromosome count") +
theme_classic2() +
theme(legend.position = "none") +
ggtitle("Varroa mite chromosome count
Karyotyping")
# or histogram:
p_karyo_hist = dat_karyo %>%
ggplot(aes(x=chromo_number, color = Sex, fill = Sex)) +
geom_density(alpha=.2) +
geom_histogram(position="dodge", binwidth = 1) +
ylab("Count") +
xlab("Chromosome count") +
theme_classic2() +
theme(legend.position = "none") +
ggtitle("Varroa mite chromosome count
Karyotyping")
ggarrange(p_ploidy_hist, p_karyo_hist, labels = c("A", "B"),
common.legend = TRUE, legend = "bottom")
library("tidyverse")
library("dplyr")
library("ggplot2")
library("ggpubr")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR") # for extracting genotype data from a vcf file
library("janitor")
library("splitstackshape")
knitr::opts_chunk$set(echo = TRUE)
vcf <- read.vcfR("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/Q40BIALLDP16HDP40mis.5Chr7/Q40BIALLDP16HDP40mis.5Chr7.recode.vcf", verbose = FALSE )
vcf
# extract the genotype for each site in each individual
gt <- extract.gt(vcf, element = "GT")
gt <- as.data.frame(t(gt)) %>%
rownames_to_column("ID")
#clean the ID names
gt$ID <- sub("_[^_]+$", "", gt$ID)
table <-gt %>%
t() %>%
as.data.frame() %>%
row_to_names(row_number = 1) %>%
dplyr::select(contains(c("son", "dat", "fnd"))) # keep only adults of F0, F1 and F2
# set the families (include only families with at least one adult F2)
family = grep("grndat|grnson",gt$ID, value=TRUE) %>%
str_extract("[^_]+")  %>%
unique()
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "0/1")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/0")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "Male",
grepl("dat", sample) ~ "Female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples
View(observed)
# define the group of abnormal males
abnorm_males = tibble(sample = c("240_241c_grnson", "400_401a_grnson","412_413a_grnson", "426_427b_grnson", "458_459a_grnson", "46_47d_grnson", "478_479-1a_grnson"), sex = "Male", normality = "abnormal")
samples_obs <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "Male",
grepl("dat", sample) ~ "Female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(prop = n/total) %>%
left_join(abnorm_males, by = "sample") %>%
dplyr::select(-sex.y) %>%
replace(is.na(.), "normal") %>%
dplyr::rename(sex = sex.x) %>%
unite("type", sex,normality, remove = FALSE)
# make a table with the expected proportions for the different modes of reproduction:
haploid = data.frame(mode = "haploid", gt = c("0/0", "0/1", "1/1"),prop = c(1, 0, 0))
automixis = data.frame(mode = "automixis", gt = c("0/0", "0/1", "1/1"),prop = c(1, 0, 0))
sexual = data.frame(mode = "sexual",gt = c("0/0", "0/1", "1/1"),prop = c(0.5, 0.5, 0))
modes = rbind(Haploid,Automixis,Sexual)
# make a table with the expected proportions for the different modes of reproduction:
haploid = data.frame(mode = "Haploid", gt = c("0/0", "0/1", "1/1"),prop = c(1, 0, 0))
automixis = data.frame(mode = "Automixis", gt = c("0/0", "0/1", "1/1"),prop = c(1, 0, 0))
sexual = data.frame(mode = "Sexual",gt = c("0/0", "0/1", "1/1"),prop = c(0.5, 0.5, 0))
modes = rbind(Haploid,Automixis,Sexual)
library("tidyverse")
library("plyr")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR") # for extracting genotype data from a vcf file
library("data.table")
library("stringr")
library("janitor")
library("plotly")
library("kableExtra")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 10,
fig.asp = 0.4,
out.width = "100%")
vcf <- read.vcfR("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/Q40BIALLDP16HDP40mis.5Chr7/Q40BIALLDP16HDP40mis.5Chr7.recode.vcf", verbose = FALSE )
vcf
# extract the genotype for each site in each individual
gt <- extract.gt(vcf, element = "GT")
gt <- as.data.frame(t(gt)) %>%
rownames_to_column("ID")
#clean the ID names
gt$ID <- sub("_[^_]+$", "", gt$ID)
table <- gt %>%
t() %>%
as.data.frame() %>%
row_to_names(row_number = 1)
# set chromosome variable
chromosomes = c("NW_019211454.1","NW_019211455.1","NW_019211456.1", "NW_019211457.1","NW_019211458.1","NW_019211459.1","NW_019211460.1")
# define a list to put all the data frames in
chr_list <- list()
# make a list with dataframes - each containing 1 chromosome
for (chr in chromosomes) {
chr_list[[chr]] <- table %>%
rownames_to_column("site") %>%
dplyr::filter(stringr::str_detect(site,chr))
}
# set a vector of all 30 families:
#family = str_extract(gt$ID, "[^_]+") %>% unique()
# or, include only families with at least one adult F2
family = grep("grndat|grnson",gt$ID, value=TRUE) %>%
str_extract("[^_]+")  %>%
unique()
# make a function to apply:
fun <- function(df) {
df %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "0/0")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
#replace_na(list(value="1/1")) %>%
dplyr::rename(sample = name, gt = value) %>%
tidyr::complete(sample, gt, fill = list(obs = 0)) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::rename(obs = n) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# make an empty list
obs <- list()
# apply the function for each of the chromosome, per family
for (fam in family) {
obs[[fam]] <- lapply(chr_list, fun)
}
# bind all families together, to a final data frame containing all observed counts
#observed <- do.call("rbind", obs)
chr_length = tibble(Chr = c("NW_019211454.1", "NW_019211455.1", "NW_019211456.1", "NW_019211457.1", "NW_019211458.1", "NW_019211459.1", "NW_019211460.1"),
bp = c(76960006, 60513814,58583513,52932055,42024542,32556157,39431147))
# calculate recombination freq for each male and female sample
# make a function to loop over all families, is each chromosome
func_recom <- function(df) {
df %>%
as.data.frame() %>%
mutate(sum_pairs = total*(total-1)/2) %>%
mutate(Chr = chr) %>%
left_join(chr_length, by = "Chr") %>%
# mutate(sex = replace_na(sex, "female")) %>% # assume all F2 nymphs are females
dplyr::filter(sex == "female") %>% # keep only adult F2 females (exclude nymphs and eggs)--> if I do that, I dont have enough sites to calculate the recombination freq...
mutate(fam = str_extract(sample, "[^_]+")) %>%
pivot_wider(names_from = gt, values_from = obs) }
recomb_freq <- list()
# apply the function for each element in the large list (list of lists) of the chromosome, per family
for (chr in chromosomes) {
for (fam in family) {
recomb_freq[[chr]][[fam]] <- func_recom(obs[[fam]][[chr]]) } }
# bind all element into one data frame (first bind each chromosome, then bind all chromosomes together)
obs_df <- tibble()
obs_dfAll <- tibble()
for (chr in chromosomes) {
obs_df <- bind_rows(recomb_freq [[chr]])
obs_dfAll <- rbind(obs_df, obs_dfAll) %>% replace(., is.na(.), 0)}
# calculate the recombinant pairs, and their proportion out of total unique pairs, per sample
obs_dfAll <- obs_dfAll %>%
group_by(sample) %>%
mutate(recomb_pairs = case_when(sex == "female" ~ `0/0` * `0/1`)) %>%
mutate(freq = recomb_pairs/sum_pairs) %>%
mutate(freq_cM_bp = freq/bp)
head(obs_dfAll)
obs_dfAll
# plot the median of recombination freq, per chromosome, filter out families with low number of sites
#plotly:
p_female_00_01_plotly = ggplot(filter(obs_dfAll, total > 10), aes(x=Chr, y=freq_cM_bp, text = paste("Sample:", sample, "\n N sites:", total))) +
geom_boxplot() +
geom_jitter(width=0.1, size=2) +
theme_classic() +
theme(axis.text.x=element_text(angle = 45, hjust = 0)) +
ggtitle("Is there recombintaion in F1 FEMALES?
Recombination frequency in F2 females,
of F1 male 0/0 x F1 female 0/1 cross") +
xlab("Chromosome") +
ylab("Recombintaion frequency (cM/bp)")
ggplotly(p_female_00_01_plotly, tooltip = "text")
#regular plot
#p_female_00_01 = ggplot(filter(obs_dfAll, total > 10), aes(x=Chr, y=freq_cM_bp)) +
geom_boxplot() +
geom_jitter(width=0.1, size=2) +
theme_classic() +
theme(axis.text.x=element_text(angle = 45, hjust = 1)) +
ggtitle("Is there recombintaion in F1 FEMALES?
Recombination frequency in F2 females, of F1 male 0/0 x F1 female 0/1 cross") +
xlab("Chromosome") +
ylab("Recombintaion frequency (cM/bp)")
library("tidyverse")
library("plyr")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR") # for extracting genotype data from a vcf file
library("data.table")
library("stringr")
library("janitor")
library("plotly")
#library("gmodels")
#library("rstatix")
#library("freqtables")
#library("broom")
#library("patchwork") # for gathering the plots
#library("fuzzyjoin") # to join tables based on a string in a column
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 10,
fig.asp = 0.4,
out.width = "100%")
#fig.width = 6,fig.asp = 0.8,out.width = "100%"
# NO filtering
ind_depth <- read_delim("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/Q40BIALLDP16HDP40mis.5Chr7/Q40BIALLDP16HDP40mis.5Chr7.idepth", delim = "\t",
col_names = c("ind", "nsites", "depth"), skip = 1) %>%
mutate(sex = case_when(
grepl("son", ind) ~ "Male",
grepl("dat|fnd", ind) ~ "Female")) %>%
na.omit()
View(ind_depth)
ind_depth$ind <- sub("_[^_]+$", "", ind_depth$ind)
#Then we plot the distribution as a histogram using ggplot and geom_hist.
ggplot(ind_depth, aes(depth)) + geom_histogram(fill = "dodgerblue1", colour = "black", alpha = 0.3)
ggplot(ind_depth, aes(depth)) + geom_density(fill = "dodgerblue1", colour = "black", alpha = 0.3)
ind_depth %>% filter(grepl("grnson|grndat", ind)) %>%
ggplot(aes(y = depth, x = ind, color = sex)) + geom_point() + theme_classic()
ggplotly(p_ind_depth)
p_ind_depth = ind_depth %>% filter(grepl("grnson|grndat", ind)) %>%
ggplot(aes(y = depth, x = ind, color = sex)) + geom_point() + theme_classic()
ggplotly(p_ind_depth)
ind_depth %>% dplyr::filter(depth < 30) %>% filter(depth > 10 ) %>%
select(ind) %>% view()
p_ind_depth + geom_label(aes(fill = factor(sex)), colour = "white", fontface = "bold")
p_ind_depth = ind_depth %>% filter(grepl("grnson|grndat", ind)) %>%
ggplot(aes(y = depth, x = ind, color = sex, label = "ind")) + geom_point() + theme_classic()
p_ind_depth + geom_label(aes(fill = factor(sex)), colour = "white", fontface = "bold")
p_ind_depth = ind_depth %>% filter(grepl("grnson|grndat", ind)) %>%
ggplot(aes(y = depth, x = ind, color = sex, label = ind)) + geom_point() + theme_classic()
p_ind_depth + geom_label(aes(fill = factor(sex)), colour = "white", fontface = "bold")
p_ind_depth + geom_label(aes(fill = factor(sex)))
p_ind_depth + geom_label()
ind_depth %>% dplyr::filter(depth < 30) %>% filter(depth > 10 ) %>%
select(ind) %>% view()
p_ind_depth + geom_label() +geom_text(check_overlap = TRUE)
p_ind_depth + geom_label() +geom_text(check_overlap = TRUE, angle = 45)
p_ind_depth + geom_label() +geom_text(check_overlap = TRUE, angle = 45,hjust = 0, nudge_x = 0.05)
p_ind_depth +
# geom_label() +
geom_text(check_overlap = TRUE, angle = 45,hjust = 0, nudge_x = 0.05)
p_ind_depth +
# geom_label() +
geom_text(check_overlap = TRUE, angle = 45,hjust = 0, nudge_x = 0.05) +
theme(axis.text.x = "blank")
p_ind_depth +
# geom_label() +
geom_text(check_overlap = TRUE, angle = 45,hjust = 0, nudge_x = 0.05) +
theme(axis.text.x = element_blank())
p_ind_depth +
# geom_label() +
geom_text( angle = 45,hjust = 0, nudge_x = 0.05) +
theme(axis.text.x = element_blank())
gsub("_*\\_", "", ind_depth$ind)
gsub("_*\\", "", ind_depth$ind)
gsub("*\\_", "", ind_depth$ind)
gsub("*\\_", "", ind_depth$ind)
gsub("_.*", "", ind_depth$ind)
gsub("*._", "", ind_depth$ind)
View(ind_depth)
gsub("_.*", "", ind_depth$ind)
gsub(".*_", "", ind_depth$ind)
gsub("._*_", "", ind_depth$ind)
gsub("._*", "", ind_depth$ind)
gsub(".*", "", ind_depth$ind)
gsub("._*", "", ind_depth$ind)
gsub("_.*", "", ind_depth$ind)
gsub("//_.*", "", ind_depth$ind)
gsub("_.*//", "", ind_depth$ind)
gsub("*_.*", "", ind_depth$ind)
gsub("*_.", "", ind_depth$ind)
p_ind_depth +
# geom_label() +
geom_text( angle = 45,hjust = 0, nudge_x = 0.05,check_overlap = TRUE) +
theme(axis.text.x = element_blank())
gsub("*_.", "", ind_depth$ind)
gsub(".*?", "", ind_depth$ind)
gsub(".*_", "", ind_depth$ind)
gsub(".*_*.", "", ind_depth$ind)
gsub(".*_*", "", ind_depth$ind)
gsub("*_*", "", ind_depth$ind)
gsub(".*_*.", "", ind_depth$ind)
gsub("*_*_*", "", ind_depth$ind)
gsub("*_.*._*", "", ind_depth$ind)
gsub("*_.*._.*", "", ind_depth$ind)
gsub("*_.*_.*", "", ind_depth$ind)
gsub("*_*_.*", "", ind_depth$ind)
gsub("*_*_*.", "", ind_depth$ind)
gsub("*_*_*", "", ind_depth$ind)
ind %>%  mutate(ind = str_replace(ind, "^\\S* ", ""))
ind_depth %>%  mutate(ind = str_replace(ind, "^\\S* ", ""))
ind_depth %>%  mutate(ind = str_replace(ind, "^\\_* ", ""))
ind_depth %>%  mutate(ind = str_replace(ind, "^\\S*_", ""))
ind_depth %>%  mutate(ind = str_replace(ind, "^\S*_", ""))
ind_depth %>%  mutate(ind = str_replace(ind, "^\\S*_", ""))
p_ind_depth +
# geom_label() +
geom_text(angle = 45,hjust = 0, nudge_x = 0.05) +
theme(axis.text.x = element_blank())
summary(ind_depth$depth)
ggplotly(p_ind_depth)
ind_depth %>% dplyr::filter(depth < 30) %>% filter(depth > 10 ) %>%
select(ind) %>% view()
ind_depth %>% dplyr::filter(depth > 30) %>% filter(depth < 10 ) %>%
select(ind) %>% view()
ind_depth %>% dplyr::filter(depth > 30| < 10)
p_ind_depth +
# geom_label() +
geom_text(angle = 45,hjust = 0, nudge_x = 0.05) +
theme(axis.text.x = element_blank())
ggplotly(p_ind_depth)
p_ind_depth = ind_depth %>% filter(grepl("grnson|grndat", ind)) %>%
ggplot(aes(y = depth, x = ind, color = sex, label = ind)) + geom_point() +
theme_classic() +  theme(axis.text.x = element_blank())
ggplotly(p_ind_depth)
p_ind_depth +
# geom_label() +
geom_text(angle = 45,hjust = 0, nudge_x = 0.05)
summary(ind_depth$depth)
ind_depth %>% dplyr::filter(depth > 30) %>%
select(ind) %>% view()
low_depth = ind_depth %>% filter(depth < 10 ) %>%
select(ind)
high_depth
high_depth = ind_depth %>% dplyr::filter(depth > 30) %>%
select(ind)
low_depth = ind_depth %>% filter(depth < 10 ) %>%
select(ind)
View(high_depth)
high_depth = ind_depth %>% dplyr::filter(depth > 30)
low_depth = ind_depth %>% filter(depth < 10 )
View(low_depth)
ind_miss  <- read_delim("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/Q40BIALLDP16HDP40mis.5Chr7/Q40BIALLDP16HDP40mis.5Chr7.imiss", delim = "\t", col_names = c("ind", "ndata", "nfiltered", "nmiss", "fmiss"), skip = 1) %>%
mutate(sex = case_when(
grepl("son", ind) ~ "Male",
grepl("dat|fnd", ind) ~ "Female")) %>%
na.omit()
ind_miss$ind <- sub("_[^_]+$", "", ind_depth$ind)
View(ind_miss)
ind_miss  <- read_delim("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/Q40BIALLDP16HDP40mis.5Chr7/Q40BIALLDP16HDP40mis.5Chr7.imiss", delim = "\t", col_names = c("ind", "ndata", "nfiltered", "nmiss", "fmiss"), skip = 1) %>%
mutate(sex = case_when(
grepl("son", ind) ~ "Male",
grepl("dat|fnd", ind) ~ "Female")) %>%
na.omit()
View(ind_miss)
ind_miss$ind <- sub("_[^_]+$", "", ind_miss$ind)
p_ind_miss = ind_miss %>% filter(grepl("grnson|grndat", ind)) %>%
ggplot(aes(y = fmiss, x = ind, color = sex)) + geom_point() + theme_classic()
ggplotly(p_ind_miss)
summary(ind_miss$fmiss)
high_miss = p_ind_miss %>% dplyr::filter(fmiss > 0.7)
low_miss = p_ind_miss %>% filter(fmiss < 0.15 )
ind_depth %>%  mutate(ind = str_replace(ind, "^\\S*_", ""))
high_miss = ind_miss %>% dplyr::filter(fmiss > 0.7)
low_miss = ind_miss %>% filter(fmiss < 0.15 )
View(low_miss)
View(high_miss)
ind_depth %>% dplyr::filter(depth > 30)
ind_depth %>% filter(depth < 10 )
p_ind_depth +
# geom_label() +
geom_text(angle = 45,hjust = 0, nudge_x = 0.05)
qual_fem <- read_delim("Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/female.Q40BIALLDP16HDP40mis.5Chr7/female.Q40BIALLDP16HDP40mis.5Chr7.lqual", delim = "\t",
col_names = c("chr", "pos", "qual"), skip = 1) %>%
dplyr::mutate(sex ="Female")
qual_fem <- read_delim("Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/female.Q40BIALLDP16HDP40mis.5Chr7/female.Q40BIALLDP16HDP40mis.5Chr7.lqual", delim = "\t",
col_names = c("chr", "pos", "qual"), skip = 1) %>%
dplyr::mutate(sex ="Female")
qual_male <-read_delim("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/male.Q40BIALLDP16HDP40mis.5Chr7/male.Q40BIALLDP16HDP40mis.5Chr7.lqual", delim = "\t",
col_names = c("chr", "pos", "qual"), skip = 1) %>%
dplyr::mutate(sex ="Male")
library("tidyverse")
library("plyr")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR") # for extracting genotype data from a vcf file
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("rstatix")
library("freqtables")
library("broom")
library("DescTools") # for the Goodness-of-Fit test, 3 variables; and for Breslow-Day Test for Homogeneity of the Odds Ratios
library("vcd") # for the woolf test testign log odds for each pair
library("patchwork") # for gathering the plots
library("fuzzyjoin") # to join tables based on a string in a column
#library("aspi") # Repeated G–tests of Goodness-of-Fit, work only for 2 variables..
#library("RVAideMemoire") # Repeated G–tests of Goodness-of-Fit, work only for 2 variables...
#library("InfoTrad")
#library("ggthemes") # for more colors in the ggplot
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 10,
fig.asp = 0.4,
out.width = "100%")
#fig.width = 6,fig.asp = 0.8,out.width = "100%"
vcf <- read.vcfR("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/minQ_filter/Q15000BIALLDP16HDP40mis.5Chr7.vcf", verbose = FALSE )
vcf <- read.vcfR("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/minQ_filter/Q15000BIALLDP16HDP40mis.5Chr7.recode.vcf", verbose = FALSE )
# extract the genotype for each site in each individual
gt <- extract.gt(vcf, element = "GT")
gt <- as.data.frame(t(gt)) %>%
rownames_to_column("ID")
#clean the ID names
gt$ID <- sub("_[^_]+$", "", gt$ID)
table <-  gt %>%
t() %>%
as.data.frame() %>%
row_to_names(row_number = 1) %>%
dplyr::select(contains(c("son", "dat", "fnd"))) # keep only adults of F0, F1 and F2
# set the families (include only families with at least one adult F2)
family = grep("grndat|grnson",gt$ID, value=TRUE) %>%
str_extract("[^_]+")  %>%
unique()
# define a list to put all the data frames in
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "0/0")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/0")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples_obs <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(prop = n/total)
pooled_obs_count =  samples_obs %>%
dplyr::filter(total>=10) %>%
filter(gt =="0/0") %>%
group_by(sex) %>%
mutate(sites = sum(total)) %>%
select(c(sex,sites)) %>%
unique()
pooled_obs_count
