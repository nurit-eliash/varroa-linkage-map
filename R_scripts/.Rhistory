library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR") # for extracting genotype data from a vcf file
library("data.table")
library("stringr")
library("janitor")
library("gmodels")
library("rstatix")
library("freqtables")
library("broom")
#library("patchwork") # for gathering the plots
library("cowplot")
#library("aspi") # Repeated G–tests of Goodness-of-Fit, work only for 2 variables..
#library("RVAideMemoire") # Repeated G–tests of Goodness-of-Fit, work only for 2 variables...
#library("InfoTrad")
#library("ggthemes") # for more colors in the ggplot
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 10,
fig.asp = 1,
out.width = "100%")
#fig.width = 6,fig.asp = 0.8,out.width = "100%"
vcf <- read.vcfR("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/minQ_filter/Q15000BIALLDP16HDP40mis.5maf.2Chr7.recode.vcf", verbose = FALSE )
vcf
# extract the genotype for each site in each individual
gt <- extract.gt(vcf, element = "GT")
gt <- as.data.frame(t(gt)) %>%
rownames_to_column("ID")
#clean the ID names
gt$ID <- sub("_[^_]+$", "", gt$ID)
table <-  gt %>%
t() %>%
as.data.frame() %>%
row_to_names(row_number = 1) %>%
dplyr::select(contains(c("son", "dat", "fnd"))) # keep only adults of F0, F1 and F2
# set the families (include only families with at least one adult F2)
family = grep("grndat|grnson",gt$ID, value=TRUE) %>%
str_extract("[^_]+")  %>%
unique()
# define a list to put all the data frames in
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "0/0")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/0")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples_obs <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(prop = n/total)
pooled_obs_count =  samples_obs %>%
dplyr::filter(total>=10) %>%
filter(gt =="0/0") %>%
group_by(sex) %>%
mutate(sites = sum(total)) %>%
select(c(sex,sites)) %>%
unique()
pooled_obs_count
p_00_00 =  samples_obs %>% dplyr::filter(total>=10) %>%
ggplot(aes(fill=gt, y=prop, x=sex)) +
geom_bar(position="fill", stat="identity", ) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12)) +
scale_fill_manual(values=c("#ffbf00", "#66b032","#1982c4"))+
theme(legend.position = "none")+
ggtitle("F0 female, (0/0); F1 male (0/0); F1 female (0/0)",
subtitle = paste("F2 female = ", filter(pooled_obs_count, sex == 'female')$sites, ", F2 male =", filter(pooled_obs_count, sex == 'male')$sites))
# define a list to put all the data frames in
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "1/1")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "1/1")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples_obs <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(prop = n/total)
pooled_obs_count =  samples_obs %>%
dplyr::filter(total>=10) %>%
filter(gt =="1/1") %>%
group_by(sex) %>%
mutate(sites = sum(total)) %>%
select(c(sex,sites)) %>%
unique()
pooled_obs_count
p_11_11 =  samples_obs %>% dplyr::filter(total>=10) %>%
ggplot(aes(fill=gt, y=prop, x=sex)) +
geom_bar(position="fill", stat="identity", ) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12)) +
scale_fill_manual(values=c("#ffbf00", "#66b032","#1982c4"))+
theme(legend.position = "none")+
ggtitle("F0 female, (1/1); F1 male (1/1); F1 female (1/1)",
subtitle = paste("F2 female = ", filter(pooled_obs_count, sex == 'female')$sites, ", F2 male =", filter(pooled_obs_count, sex == 'male')$sites))
# define a list to put all the data frames in
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "0/0")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "1/1")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples_obs <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(prop = n/total)
pooled_obs_count =  samples_obs %>%
dplyr::filter(total>=10) %>%
filter(gt =="0/0") %>%
group_by(sex) %>%
mutate(sites = sum(total)) %>%
select(c(sex,sites)) %>%
unique()
pooled_obs_count
p_00_11 =  samples_obs %>% dplyr::filter(total>=10) %>%
ggplot(aes(fill=gt, y=prop, x=sex)) +
geom_bar(position="fill", stat="identity", ) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12)) +
scale_fill_manual(values=c("#ffbf00", "#66b032","#1982c4"))+
theme(legend.position = "none")+
ggtitle("F0 female, (0/0); F1 male (0/0); F1 female (1/1)",
subtitle = paste("F2 female = ", filter(pooled_obs_count, sex == 'female')$sites, ", F2 male =", filter(pooled_obs_count, sex == 'male')$sites))
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "1/1")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/0")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples_obs <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(prop = n/total)
pooled_obs_count =  samples_obs %>%
dplyr::filter(total>=10) %>%
filter(gt =="1/1") %>%
group_by(sex) %>%
mutate(sites = sum(total)) %>%
select(c(sex,sites)) %>%
unique()
pooled_obs_count
p_11_00 = samples_obs %>% dplyr::filter(total>=10) %>%
ggplot(aes(fill=gt, y=prop, x=sex)) +
geom_bar(position="fill", stat="identity", ) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12)) +
scale_fill_manual(values=c("#ffbf00", "#66b032","#1982c4"))+
theme(legend.position = "none")+
ggtitle("F0 female, (1/1); F1 male (1/1); F1 female (0/0)",
subtitle = paste("F2 female = ", filter(pooled_obs_count, sex == 'female')$sites, ", F2 male =", filter(pooled_obs_count, sex == 'male')$sites))
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "0/0")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples_obs <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(prop = n/total)
pooled_obs_count =  samples_obs %>%
dplyr::filter(total>=10) %>%
filter(gt =="0/0") %>%
group_by(sex) %>%
mutate(sites = sum(total)) %>%
select(c(sex,sites)) %>%
unique()
pooled_obs_count
p_00_01 = samples_obs %>% dplyr::filter(total>=10) %>%
ggplot(aes(fill=gt, y=prop, x=sex)) +
geom_bar(position="fill", stat="identity", ) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12)) +
scale_fill_manual(values=c("#ffbf00", "#66b032","#1982c4"))+
theme(legend.position = "none")+
ggtitle("F0 female, (0/0); F1 male (0/0); F1 female (0/1)",
subtitle = paste("F2 female = ", filter(pooled_obs_count, sex == 'female')$sites, ", F2 male =", filter(pooled_obs_count, sex == 'male')$sites))
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "1/1")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples_obs <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(prop = n/total)
pooled_obs_count =  samples_obs %>%
dplyr::filter(total>=10) %>%
filter(gt =="0/1") %>%
group_by(sex) %>%
mutate(sites = sum(total)) %>%
select(c(sex,sites)) %>%
unique()
pooled_obs_count
p_11_01 = samples_obs %>% dplyr::filter(total>=10) %>%
ggplot(aes(fill=gt, y=prop, x=sex)) +
geom_bar(position="fill", stat="identity", ) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12)) +
scale_fill_manual(values=c("#ffbf00", "#66b032","#1982c4"))+
theme(legend.position = "none")+
ggtitle("F0 female, (1/1); F1 male (1/1); F1 female (0/1)",
subtitle = paste("F2 female = ", filter(pooled_obs_count, sex == 'female')$sites, ", F2 male =", filter(pooled_obs_count, sex == 'male')$sites))
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "0/1")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/0")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples_obs <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(prop = n/total)
pooled_obs_count =  samples_obs %>%
dplyr::filter(total>=10) %>%
filter(gt =="0/0") %>%
group_by(sex) %>%
mutate(sites = sum(total)) %>%
select(c(sex,sites)) %>%
unique()
pooled_obs_count
p_01_00 = samples_obs %>% dplyr::filter(total>=10) %>%
ggplot(aes(fill=gt, y=prop, x=sex)) +
geom_bar(position="fill", stat="identity", ) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12)) +
scale_fill_manual(values=c("#ffbf00", "#66b032","#1982c4"))+
theme(legend.position = "none")+
ggtitle("F0 female, (0/1); F1 male (0/1); F1 female (0/0)",
subtitle = paste("F2 female = ", filter(pooled_obs_count, sex == 'female')$sites, ", F2 male =", filter(pooled_obs_count, sex == 'male')$sites))
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "0/1")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "1/1")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples_obs <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(prop = n/total)
pooled_obs_count =  samples_obs %>%
dplyr::filter(total>=10) %>%
filter(gt =="0/1") %>%
group_by(sex) %>%
mutate(sites = sum(total)) %>%
select(c(sex,sites)) %>%
unique()
pooled_obs_count
p_01_11 = samples_obs %>% dplyr::filter(total>=10) %>%
ggplot(aes(fill=gt, y=prop, x=sex)) +
geom_bar(position="fill", stat="identity", ) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12)) +
scale_fill_manual(values=c("#ffbf00", "#66b032","#1982c4"))+
theme(legend.position = "none")+
ggtitle("F0 female, (0/1); F1 male (0/1); F1 female (1/1)",
subtitle = paste("F2 female = ", filter(pooled_obs_count, sex == 'female')$sites, ", F2 male =", filter(pooled_obs_count, sex == 'male')$sites))
# define a list to put all the data frames in
obs <- list()
for (fam in family) {
obs[[fam]] <- table %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "0/1")) %>% # force F0 female to be homo, like her son
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
dplyr::rename(sample = name, gt = value) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# bind all families together, to a final data frame containing all observed counts
observed <- do.call("rbind", obs) %>% mutate(sample = as.character(sample))
samples <- data.frame(sample = rep(unique(observed$sample), each =3), gt = rep(c("0/0", "0/1", "1/1")))
samples_obs <- left_join(samples, observed, by=c("sample","gt")) %>% mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female")) %>%
group_by(sample) %>%
replace(is.na(.), 0) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::mutate(prop = n/total)
pooled_obs_count =  samples_obs %>%
dplyr::filter(total>=10) %>%
filter(gt =="0/1") %>%
group_by(sex) %>%
mutate(sites = sum(total)) %>%
select(c(sex,sites)) %>%
unique()
pooled_obs_count
p_01_01 = samples_obs %>% dplyr::filter(total>=10) %>%
ggplot(aes(fill=gt, y=prop, x=sex)) +
geom_bar(position="fill", stat="identity", ) +
labs(fill = "Genotype") +
theme_classic() +
theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12)) +
scale_fill_manual(values=c("#ffbf00", "#66b032","#1982c4"))+
theme(legend.position = "none")+
ggtitle("F0 female, (0/1); F1 male (0/1); F1 female (0/1)",
subtitle = paste("F2 female = ", filter(pooled_obs_count, sex == 'female')$sites, ", F2 male =", filter(pooled_obs_count, sex == 'male')$sites))
legend <- get_legend(p_00_00)   # get the legend of the first one plot
# here the plots in a grid
prow <- plot_grid( p_00_00 + theme(legend.position="none"),
# here you add the percentage
p_11_11 + theme(legend.position="none")+ scale_y_continuous(),
p_11_00 + theme(legend.position="none")+ scale_y_continuous(),
p_00_11 + theme(legend.position="none")+ scale_y_continuous(),
align = 'v',
#labels = c("A", "B"),
hjust = -1,
nrow = 2)
# here you add the legend
plot_grid( prow, legend, rel_widths = c(1, .2))
legend <- get_legend(p_01_01)   # get the legend of the first one plot
# here the plots in a grid
prow <- plot_grid( p_00_01 + theme(legend.position="none"),
# here you add the percentage
p_11_01 + theme(legend.position="none")+ scale_y_continuous(),
p_01_00 + theme(legend.position="none")+ scale_y_continuous(),
p_01_11 + theme(legend.position="none")+ scale_y_continuous(),
align = 'v',
#labels = c("A", "B"),
hjust = -1,
nrow = 2)
# here you add the legend
plot_grid( prow, legend, rel_widths = c(1, .2))
vcf
