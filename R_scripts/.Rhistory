dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
sites_00_01 <- lapply(sites, "[", "site") %>% unlist()
# loop over families for cross (1/1 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
sites_11_01 <- lapply(sites, "[", "site") %>% unlist()
# bind the two vectors, and remove duplicates
info_sites_NW_019211454.1 <- c(sites_11_01,sites_00_01) %>% unique()
# we have a total of 4,737 informative sites from the two crosses
# now i filter for these sites in the VCF file and use these for the LepMap
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>%
rownames_to_column("site") %>%
dplyr::filter(stringr::str_detect(site,"NW_019211455.1"))
# there are 7,833 sites on the 1st chromosome
# in each family,
# filter for sites with:
# (1) homo x hetero F1 cross (0/0 x 0/1), so we can predict the parental and recombinant F2 types
# (2) homo F0 (0/0), so we can phase the hetero F1 sites
# loop over families for cross (0/0 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
sites_00_01 <- lapply(sites, "[", "site") %>% unlist()
# loop over families for cross (1/1 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
sites_11_01 <- lapply(sites, "[", "site") %>% unlist()
# bind the two vectors, and remove duplicates
info_sites_NW_019211455.1 <- c(sites_11_01,sites_00_01) %>% unique()
# we have a total of 4,737 informative sites from the two crosses
# now i filter for these sites in the VCF file and use these for the LepMap
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>%
rownames_to_column("site") %>%
dplyr::filter(stringr::str_detect(site,"NW_019211456.1"))
# there are 7,833 sites on the 1st chromosome
# in each family,
# filter for sites with:
# (1) homo x hetero F1 cross (0/0 x 0/1), so we can predict the parental and recombinant F2 types
# (2) homo F0 (0/0), so we can phase the hetero F1 sites
# loop over families for cross (0/0 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
sites_00_01 <- lapply(sites, "[", "site") %>% unlist()
# loop over families for cross (1/1 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
sites_11_01 <- lapply(sites, "[", "site") %>% unlist()
# bind the two vectors, and remove duplicates
info_sites_NW_019211456.1 <- c(sites_11_01,sites_00_01) %>% unique()
# we have a total of 4,737 informative sites from the two crosses
# now i filter for these sites in the VCF file and use these for the LepMap
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>%
rownames_to_column("site") %>%
dplyr::filter(stringr::str_detect(site,"NW_019211457.1"))
# there are 7,833 sites on the 1st chromosome
# in each family,
# filter for sites with:
# (1) homo x hetero F1 cross (0/0 x 0/1), so we can predict the parental and recombinant F2 types
# (2) homo F0 (0/0), so we can phase the hetero F1 sites
# loop over families for cross (0/0 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
sites_00_01 <- lapply(sites, "[", "site") %>% unlist()
# loop over families for cross (1/1 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
sites_11_01 <- lapply(sites, "[", "site") %>% unlist()
# bind the two vectors, and remove duplicates
info_sites_NW_019211457.1 <- c(sites_11_01,sites_00_01) %>% unique()
# we have a total of 4,737 informative sites from the two crosses
# now i filter for these sites in the VCF file and use these for the LepMap
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>%
rownames_to_column("site") %>%
dplyr::filter(stringr::str_detect(site,"NW_019211458.1"))
# there are 7,833 sites on the 1st chromosome
# in each family,
# filter for sites with:
# (1) homo x hetero F1 cross (0/0 x 0/1), so we can predict the parental and recombinant F2 types
# (2) homo F0 (0/0), so we can phase the hetero F1 sites
# loop over families for cross (0/0 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
sites_00_01 <- lapply(sites, "[", "site") %>% unlist()
# loop over families for cross (1/1 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
sites_11_01 <- lapply(sites, "[", "site") %>% unlist()
# bind the two vectors, and remove duplicates
info_sites_NW_019211458.1 <- c(sites_11_01,sites_00_01) %>% unique()
# we have a total of 4,737 informative sites from the two crosses
# now i filter for these sites in the VCF file and use these for the LepMap
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>%
rownames_to_column("site") %>%
dplyr::filter(stringr::str_detect(site,"NW_019211459.1"))
# there are 7,833 sites on the 1st chromosome
# in each family,
# filter for sites with:
# (1) homo x hetero F1 cross (0/0 x 0/1), so we can predict the parental and recombinant F2 types
# (2) homo F0 (0/0), so we can phase the hetero F1 sites
# loop over families for cross (0/0 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
sites_00_01 <- lapply(sites, "[", "site") %>% unlist()
# loop over families for cross (1/1 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
sites_11_01 <- lapply(sites, "[", "site") %>% unlist()
# bind the two vectors, and remove duplicates
info_sites_NW_019211459.1 <- c(sites_11_01,sites_00_01) %>% unique()
# we have a total of 4,737 informative sites from the two crosses
# now i filter for these sites in the VCF file and use these for the LepMap
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>%
rownames_to_column("site") %>%
dplyr::filter(stringr::str_detect(site,"NW_019211460.1"))
# there are 7,833 sites on the 1st chromosome
# in each family,
# filter for sites with:
# (1) homo x hetero F1 cross (0/0 x 0/1), so we can predict the parental and recombinant F2 types
# (2) homo F0 (0/0), so we can phase the hetero F1 sites
# loop over families for cross (0/0 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
sites_00_01 <- lapply(sites, "[", "site") %>% unlist()
# loop over families for cross (1/1 x 0/1)
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
sites_11_01 <- lapply(sites, "[", "site") %>% unlist()
# bind the two vectors, and remove duplicates
info_sites_NW_019211460.1 <- c(sites_11_01,sites_00_01) %>% unique()
# we have a total of 4,737 informative sites from the two crosses
# now i filter for these sites in the VCF file and use these for the LepMap
info_sites <-  c(info_sites_NW_019211454.1,info_sites_NW_019211455.1, info_sites_NW_019211456.1, info_sites_NW_019211457.1, info_sites_NW_019211458.1, info_sites_NW_019211459.1, info_sites_NW_019211460.1) %>% unique()
info_sites
write_delim(info_sites, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.txt")
write_delim(info_sites, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.tsv")
write_tsv(info_sites, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.tsv")
c(info_sites_NW_019211454.1,info_sites_NW_019211455.1, info_sites_NW_019211456.1, info_sites_NW_019211457.1, info_sites_NW_019211458.1, info_sites_NW_019211459.1, info_sites_NW_019211460.1) %>% unique() %>% as.data.frame()
info_sites <-  c(info_sites_NW_019211454.1,info_sites_NW_019211455.1, info_sites_NW_019211456.1, info_sites_NW_019211457.1, info_sites_NW_019211458.1, info_sites_NW_019211459.1, info_sites_NW_019211460.1) %>% unique() %>% as.data.frame()
View(info_sites)
write_tsv(info_sites, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.tsv")
write.table(info_sites, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.tsv",  col.names=FALSE)
write_tsv(info_sites, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.tsv",  col_names = !append)
write_tsv(info_sites, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.tsv")
info_sites <-  c(info_sites_NW_019211454.1,info_sites_NW_019211455.1, info_sites_NW_019211456.1, info_sites_NW_019211457.1, info_sites_NW_019211458.1, info_sites_NW_019211459.1, info_sites_NW_019211460.1) %>% unique() #%>% as.data.frame()
write_tsv(info_sites, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.tsv")
info_sites <-  c(info_sites_NW_019211454.1,info_sites_NW_019211455.1, info_sites_NW_019211456.1, info_sites_NW_019211457.1, info_sites_NW_019211458.1, info_sites_NW_019211459.1, info_sites_NW_019211460.1) %>% unique() #%>% as.data.frame()
write.csv(info_sites,file="/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.tsv",row.names=F)
write.csv(info_sites,file="/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.tsv",row.names=F, col.names=FALSE)
write_delim(info_sites, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.tsv")
info_sites <-  c(info_sites_NW_019211454.1,info_sites_NW_019211455.1, info_sites_NW_019211456.1, info_sites_NW_019211457.1, info_sites_NW_019211458.1, info_sites_NW_019211459.1, info_sites_NW_019211460.1) %>% unique() %>% as.data.frame()
write_delim(info_sites, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.tsv")
write_delim(info_sites, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/info_sites.tsv", col_names = FALSE)
View(info_sites)
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211454.1"))
# there are 7,833 sites on the 1st chromosome
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
NW_019211454.1 <- lapply(sites, "[", "site") %>% unlist()
library("tidyverse")
library("plyr")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR") # for extracting genotype data from a vcf file
library("data.table")
library("stringr")
library("janitor")
knitr::opts_chunk$set(echo = TRUE)
vcf <- read.vcfR("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/Q40BIALLDP16HDP40mis.5Chr7/Q40BIALLDP16HDP40mis.5Chr7.recode.vcf", verbose = FALSE )
vcf
# extract the genotype for each site in each individual
gt <- extract.gt(vcf, element = "GT")
gt <- as.data.frame(t(gt)) %>%
rownames_to_column("ID")
#clean the ID names
gt$ID <- sub("_[^_]+$", "", gt$ID)
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211454.1"))
# there are 7,833 sites on the 1st chromosome
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
NW_019211454.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211455.1"))
# there are 7,833 sites on the 1st chromosome
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
NW_019211455.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211456.1"))
# there are 7,833 sites on the 1st chromosome
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
NW_019211456.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211457.1"))
# there are 7,833 sites on the 1st chromosome
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
NW_019211457.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211458.1"))
# there are 7,833 sites on the 1st chromosome
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
NW_019211458.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211459.1"))
# there are 7,833 sites on the 1st chromosome
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
NW_019211459.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211460.1"))
# there are 7,833 sites on the 1st chromosome
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "0/0"))
}
#make it into a vector
NW_019211460.1 <- lapply(sites, "[", "site") %>% unlist()
InfoSites_00_01 <- c(NW_019211454.1, NW_019211455.1,NW_019211456.1, NW_019211457.1,NW_019211458.1,NW_019211459.1,NW_019211460.1)
InfoSites_00_01 <- c(NW_019211454.1, NW_019211455.1,NW_019211456.1, NW_019211457.1,NW_019211458.1,NW_019211459.1,NW_019211460.1) %>% unique()
write_delim(InfoSites_00_01, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/InfoSites_00_01.tsv", col_names = FALSE)
InfoSites_00_01 <- c(NW_019211454.1, NW_019211455.1,NW_019211456.1, NW_019211457.1,NW_019211458.1,NW_019211459.1,NW_019211460.1) %>% unique() %>% as.data.frame()
write_delim(InfoSites_00_01, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/InfoSites_00_01.tsv", col_names = FALSE)
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211454.1"))
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
NW_019211454.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211455.1"))
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
NW_019211455.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211456.1"))
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
NW_019211456.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211457.1"))
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
NW_019211457.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211458.1"))
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
NW_019211458.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211458.1"))
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
NW_019211458.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211459.1"))
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
NW_019211459.1 <- lapply(sites, "[", "site") %>% unlist()
# keep sites on the 1st chromosome
df  <- setNames(data.frame(t(gt[,-1])), gt[,1]) %>% rownames_to_column("site") %>% dplyr::filter(stringr::str_detect(site,"NW_019211460.1"))
families = stringr::str_extract(gt$ID, "[^_]+") %>% unique()
sites = list()
for (fam in families) {
sites[[fam]] <- df %>%
dplyr::select(starts_with(c("site",fam))) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("fnd")), all_vars(. == "1/1"))
}
# extract the sites names in all families:
NW_019211460.1 <- lapply(sites, "[", "site") %>% unlist()
InfoSites_11_01 <- c(NW_019211454.1, NW_019211455.1,NW_019211456.1, NW_019211457.1,NW_019211458.1,NW_019211459.1,NW_019211460.1) %>% unique() %>% as.data.frame()
# there are 13,651 informative sites for the 0/0 x 0/1 F1 "family"
write_delim(InfoSites_11_01, "/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/results/InfoSites_11_01.tsv", col_names = FALSE)
