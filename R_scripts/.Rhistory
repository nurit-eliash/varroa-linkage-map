theme(axis.text.x=element_blank()) +
ylab("Recombintaion frequency (cM/bp)") +
xlab(element_blank())
# plot the median of recombination freq, per chromosome
# filter out families with low number of sites
p_recom <- ggplot(filter(obs_dfAll, total > 10), aes(x=Chr, y=freq_cM_bp, fill=sex)) +
geom_boxplot() +
facet_wrap(~Chr, scale="free") +
theme_classic() +
theme(axis.text.x=element_blank()) +
ylab("Recombintaion frequency (cM/bp)") +
xlab(element_blank())
p_recom
chr_length = tibble(Chr = c("NW_019211454.1", "NW_019211455.1", "NW_019211456.1", "NW_019211457.1", "NW_019211458.1", "NW_019211459.1", "NW_019211460.1"),
bp = c(76960006, 60513814,58583513,52932055,42024542,32556157,39431147))
# calculate recombination freq for each male and female sample
# make a function to loop over all families, is each chromosome
func_recom <- function(df) {
df %>%
as.data.frame() %>%
mutate(sum_pairs = total*(total-1)/2) %>%
mutate(Chr = chr) %>%
left_join(chr_length, by = "Chr") %>%
#mutate(sex = replace_na(sex, "female")) %>% # assume all F2 nymphs are females
mutate(fam = str_extract(sample, "[^_]+")) %>%
pivot_wider(names_from = gt, values_from = obs) }
recomb_freq <- list()
# apply the function for each element in the large list (list of lists) of the chromosome, per family
for (chr in chromosomes) {
for (fam in family) {
recomb_freq[[chr]][[fam]] <- func_recom(obs[[fam]][[chr]]) } }
# bind all element into one data frame (first bind each chromosome, then bind all chromosomes together)
obs_df <- tibble()
obs_dfAll <- tibble()
View(recomb_freq)
# calculate recombination freq for each male and female sample
# make a function to loop over all families, is each chromosome
func_recom <- function(df) {
# calculate recombination freq for each male and female sample
# make a function to loop over all families, is each chromosome
func_recom <- function(df) {
# calculate recombination freq for each male and female sample
# make a function to loop over all families, is each chromosome
func_recom <- function(df) {
func_recom <- function(df) {
df %>%
as.data.frame() %>%
mutate(sum_pairs = total*(total-1)/2) %>%
mutate(Chr = chr) %>%
left_join(chr_length, by = "Chr") %>%
dplyr::filter(sex == c("female", "male") %>% # exclude non adult F2 (nymphs and eggs)
mutate(fam = str_extract(sample, "[^_]+")) %>%
pivot_wider(names_from = gt, values_from = obs) }
func_recom <- function(df) {
df %>%
as.data.frame() %>%
mutate(sum_pairs = total*(total-1)/2) %>%
mutate(Chr = chr) %>%
left_join(chr_length, by = "Chr") %>%
dplyr::filter(sex == c("female", "male") %>% # exclude non adult F2 (nymphs and eggs)
mutate(fam = str_extract(sample, "[^_]+")) %>%
pivot_wider(names_from = gt, values_from = obs) }
recomb_freq$NW_019211454.1$63
fam
chr
#try:
as.data.frame(obs[[520]][[NW_019211460.1]]) %>%
as.data.frame(obs[[520]][[NW_019211460.1]])
as.data.frame(obs[[`520`]][[NW_019211460.1]])
#try:
as.data.frame(obs[["520"]][[NW_019211460.1]]) %>%
as.data.frame(obs[["520"]][[NW_019211460.1]])
as.data.frame(obs[["520"]][["NW_019211460.1"]])
mutate(sum_pairs = total*(total-1)/2) %>%
#try:
as.data.frame(obs[["520"]][["NW_019211460.1"]]) %>%
mutate(sum_pairs = total*(total-1)/2) %>%
mutate(Chr = chr) %>%
left_join(chr_length, by = "Chr") %>%
dplyr::filter(sex == c("female", "male")) %>%
mutate(fam = str_extract(sample, "[^_]+")) %>%
pivot_wider(names_from = gt, values_from = obs) %>% view()
as.data.frame(obs[["520"]][["NW_019211460.1"]]) %>% view()
as.data.frame(obs[["520"]][["NW_019211460.1"]]) %>%
mutate(sum_pairs = total*(total-1)/2) %>% view()
as.data.frame(obs[["520"]][["NW_019211460.1"]]) %>%
mutate(sum_pairs = total*(total-1)/2) %>%
mutate(Chr = chr) %>%
left_join(chr_length, by = "Chr") %>%
dplyr::filter(sex == c("female", "male")) %>% view()
#######
# calculate recombination freq for each male and female sample
# make a function to loop over all families, is each chromosome
func_recom <- function(df) {
df %>%
as.data.frame() %>%
mutate(sum_pairs = total*(total-1)/2) %>%
mutate(Chr = chr) %>%
left_join(chr_length, by = "Chr") %>%
dplyr::filter(sex == c("female", "male")) %>% # exclude non adult F2 (nymphs and eggs)
mutate(fam = str_extract(sample, "[^_]+")) %>%
pivot_wider(names_from = gt, values_from = obs) }
recomb_freq <- list()
# apply the function for each element in the large list (list of lists) of the chromosome, per family
for (chr in chromosomes) {
for (fam in family) {
recomb_freq[[chr]][[fam]] <- func_recom(obs[[fam]][[chr]]) } }
# bind all element into one data frame (first bind each chromosome, then bind all chromosomes together)
obs_df <- tibble()
obs_dfAll <- tibble()
for (chr in chromosomes) {
obs_df <- bind_rows(recomb_freq [[chr]])
obs_dfAll <- rbind(obs_df, obs_dfAll) %>% replace(., is.na(.), 0)}
# calculate the recombinant pairs, and their proportion out of total unique pairs, per sample
obs_dfAll <- obs_dfAll %>%
group_by(sample) %>%
mutate(recomb_pairs = case_when(sex == "female" ~ `0/0` * `0/1`,
sex == "male" ~ (`0/0`+`1/1`) * `0/1`)) %>%
mutate(freq = recomb_pairs/sum_pairs) %>%
mutate(freq_cM_bp = freq/bp)
# plot the median of recombination freq, per chromosome
# filter out families with low number of sites
p_recom_adult <- ggplot(filter(obs_dfAll, total > 10), aes(x=Chr, y=freq_cM_bp, fill=sex)) +
geom_boxplot() +
facet_wrap(~Chr, scale="free") +
theme_classic() +
theme(axis.text.x=element_blank()) +
ylab("Recombintaion frequency (cM/bp)") +
xlab(element_blank())
p_recom_adult
View(obs_dfAll)
chr_length = tibble(Chr = c("NW_019211454.1", "NW_019211455.1", "NW_019211456.1", "NW_019211457.1", "NW_019211458.1", "NW_019211459.1", "NW_019211460.1"),
bp = c(76960006, 60513814,58583513,52932055,42024542,32556157,39431147))
# calculate recombination freq for each male and female sample
# make a function to loop over all families, is each chromosome
func_recom <- function(df) {
df %>%
as.data.frame() %>%
mutate(sum_pairs = total*(total-1)/2) %>%
mutate(Chr = chr) %>%
left_join(chr_length, by = "Chr") %>%
mutate(sex = replace_na(sex, "female")) %>% # assume all F2 nymphs are females
#dplyr::filter(sex == c("female", "male")) %>% # keep only adult F2 (exclude nymphs and eggs)--> if I do that, I dont have enough sites to calculate the recombination freq...
mutate(fam = str_extract(sample, "[^_]+")) %>%
pivot_wider(names_from = gt, values_from = obs) }
recomb_freq <- list()
# apply the function for each element in the large list (list of lists) of the chromosome, per family
for (chr in chromosomes) {
for (fam in family) {
recomb_freq[[chr]][[fam]] <- func_recom(obs[[fam]][[chr]]) } }
# bind all element into one data frame (first bind each chromosome, then bind all chromosomes together)
obs_df <- tibble()
obs_dfAll <- tibble()
for (chr in chromosomes) {
obs_df <- bind_rows(recomb_freq [[chr]])
obs_dfAll <- rbind(obs_df, obs_dfAll) %>% replace(., is.na(.), 0)}
# calculate the recombinant pairs, and their proportion out of total unique pairs, per sample
obs_dfAll <- obs_dfAll %>%
group_by(sample) %>%
mutate(recomb_pairs = case_when(sex == "female" ~ `0/0` * `0/1`,
sex == "male" ~ (`0/0`+`1/1`) * `0/1`)) %>%
mutate(freq = recomb_pairs/sum_pairs) %>%
mutate(freq_cM_bp = freq/bp)
# plot the median of recombination freq, per chromosome
# filter out families with low number of sites
p_recom <- ggplot(filter(obs_dfAll, total > 10), aes(x=Chr, y=freq_cM_bp, fill=sex)) +
geom_boxplot() +
facet_wrap(~Chr, scale="free") +
theme_classic() +
theme(axis.text.x=element_blank()) +
ylab("Recombintaion frequency (cM/bp)") +
xlab(element_blank())
p_recom
# plot the median of recombination freq, per chromosome
# filter out families with low number of sites
p_recom_00_01 <- ggplot(filter(obs_dfAll, total > 10), aes(x=Chr, y=freq_cM_bp, fill=sex)) +
geom_boxplot() +
facet_wrap(~Chr, scale="free") +
theme_classic() +
theme(axis.text.x=element_blank()) +
ylab("Recombintaion frequency (cM/bp)") +
xlab(element_blank())
View(p_recom_00_01)
table <- gt %>%
t() %>%
as.data.frame() %>%
row_to_names(row_number = 1)
# set chromosome variable
chromosomes = c("NW_019211454.1","NW_019211455.1","NW_019211456.1", "NW_019211457.1","NW_019211458.1","NW_019211459.1","NW_019211460.1")
# define a list to put all the data frames in
chr_list <- list()
# make a list with dataframes - each containing 1 chromosome
for (chr in chromosomes) {
chr_list[[chr]] <- table %>%
rownames_to_column("site") %>%
dplyr::filter(stringr::str_detect(site,chr))
}
# set a vector of all 30 families:
family = str_extract(gt$ID, "[^_]+") %>% unique()
# or, include only families with at least one adult F2
#family = grep("grndat|grnson",gt$ID, value=TRUE) %>%
#  str_extract("[^_]+")  %>%
#  unique()
# make a function to apply:
fun <- function(df) {
df %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "1/1")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "1/1")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
#replace_na(list(value="1/1")) %>%
dplyr::rename(sample = name, gt = value) %>%
tidyr::complete(sample, gt, fill = list(obs = 0)) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::rename(obs = n) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# make an empty list
obs <- list()
# apply the function for each of the chromosome, per family
for (fam in family) {
obs[[fam]] <- lapply(chr_list, fun)
}
# bind all families together, to a final data frame containing all observed counts
#observed <- do.call("rbind", obs)
chr_length = tibble(Chr = c("NW_019211454.1", "NW_019211455.1", "NW_019211456.1", "NW_019211457.1", "NW_019211458.1", "NW_019211459.1", "NW_019211460.1"),
bp = c(76960006, 60513814,58583513,52932055,42024542,32556157,39431147))
# calculate recombination freq for each male and female sample
# make a function to loop over all families, is each chromosome
func_recom <- function(df) {
df %>%
as.data.frame() %>%
mutate(sum_pairs = total*(total-1)/2) %>%
mutate(Chr = chr) %>%
left_join(chr_length, by = "Chr") %>%
mutate(sex = replace_na(sex, "female")) %>% # assume all F2 nymphs are females
#dplyr::filter(sex == c("female", "male")) %>% # keep only adult F2 (exclude nymphs and eggs)--> if I do that, I dont have enough sites to calculate the recombination freq...
mutate(fam = str_extract(sample, "[^_]+")) %>%
pivot_wider(names_from = gt, values_from = obs) }
recomb_freq <- list()
# apply the function for each element in the large list (list of lists) of the chromosome, per family
for (chr in chromosomes) {
for (fam in family) {
recomb_freq[[chr]][[fam]] <- func_recom(obs[[fam]][[chr]]) } }
# bind all element into one data frame (first bind each chromosome, then bind all chromosomes together)
obs_df <- tibble()
obs_dfAll <- tibble()
for (chr in chromosomes) {
obs_df <- bind_rows(recomb_freq [[chr]])
obs_dfAll <- rbind(obs_df, obs_dfAll) %>% replace(., is.na(.), 0)}
# calculate the recombinant pairs, and their proportion out of total unique pairs, per sample
obs_dfAll <- obs_dfAll %>%
group_by(sample) %>%
mutate(recomb_pairs = case_when(sex == "female" ~ `1/1` * `0/1`,
sex == "male" ~ (`1/1`+`1/1`) * `0/1`)) %>%
mutate(freq = recomb_pairs/sum_pairs) %>%
mutate(freq_cM_bp = freq/bp)
# plot the median of recombination freq, per chromosome
# filter out families with low number of sites
p_recom_11_01 <- ggplot(filter(obs_dfAll, total > 10), aes(x=Chr, y=freq_cM_bp, fill=sex)) +
geom_boxplot() +
facet_wrap(~Chr, scale="free") +
theme_classic() +
theme(axis.text.x=element_blank()) +
ylab("Recombintaion frequency (cM/bp)") +
xlab(element_blank())
p_recom_11_01
dev.off()
p_recom_00_01
library("tidyverse")
library("plyr")
library("dplyr")
library("ggplot2")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
library("vcfR") # for extracting genotype data from a vcf file
library("data.table")
library("stringr")
library("janitor")
knitr::opts_chunk$set(echo = TRUE)
vcf <- read.vcfR("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/Q40BIALLDP16HDP40mis.5Chr7/Q40BIALLDP16HDP40mis.5Chr7.recode.vcf", verbose = FALSE )
vcf
# extract the genotype for each site in each individual
gt <- extract.gt(vcf, element = "GT")
gt <- as.data.frame(t(gt)) %>%
rownames_to_column("ID")
#clean the ID names
gt$ID <- sub("_[^_]+$", "", gt$ID)
table <- gt %>%
t() %>%
as.data.frame() %>%
row_to_names(row_number = 1)
# set chromosome variable
chromosomes = c("NW_019211454.1","NW_019211455.1","NW_019211456.1", "NW_019211457.1","NW_019211458.1","NW_019211459.1","NW_019211460.1")
# define a list to put all the data frames in
chr_list <- list()
# make a list with dataframes - each containing 1 chromosome
for (chr in chromosomes) {
chr_list[[chr]] <- table %>%
rownames_to_column("site") %>%
dplyr::filter(stringr::str_detect(site,chr))
}
# set a vector of all 30 families:
family = str_extract(gt$ID, "[^_]+") %>% unique()
# or, include only families with at least one adult F2
#family = grep("grndat|grnson",gt$ID, value=TRUE) %>%
#  str_extract("[^_]+")  %>%
#  unique()
# make a function to apply:
fun <- function(df) {
df %>%
dplyr::select(starts_with(fam)) %>%
dplyr::filter_at(vars(matches("_son")), all_vars(. == "0/0")) %>%
dplyr::filter_at(vars(matches("_dat")), all_vars(. == "0/1")) %>%
dplyr::filter_at(vars(matches("_fnd")), all_vars(. == "0/0")) %>%
dplyr::select(contains("grn")) %>%
tidyr::pivot_longer(everything())  %>%
#replace_na(list(value="1/1")) %>%
dplyr::rename(sample = name, gt = value) %>%
tidyr::complete(sample, gt, fill = list(obs = 0)) %>%
dplyr::count(sample, gt, .drop = FALSE) %>%
dplyr::filter(gt %in% c("0/0", "1/1", "0/1")) %>%
mutate(n = as.numeric(n)) %>%
group_by(sample) %>%
mutate(total = as.numeric(sum(n))) %>%
dplyr::rename(obs = n) %>%
mutate(sex = case_when(
grepl("son", sample) ~ "male",
grepl("dat", sample) ~ "female"))
}
# make an empty list
obs <- list()
# apply the function for each of the chromosome, per family
for (fam in family) {
obs[[fam]] <- lapply(chr_list, fun)
}
# bind all families together, to a final data frame containing all observed counts
#observed <- do.call("rbind", obs)
chr_length = tibble(Chr = c("NW_019211454.1", "NW_019211455.1", "NW_019211456.1", "NW_019211457.1", "NW_019211458.1", "NW_019211459.1", "NW_019211460.1"),
bp = c(76960006, 60513814,58583513,52932055,42024542,32556157,39431147))
# calculate recombination freq for each male and female sample
# make a function to loop over all families, is each chromosome
func_recom <- function(df) {
df %>%
as.data.frame() %>%
mutate(sum_pairs = total*(total-1)/2) %>%
mutate(Chr = chr) %>%
left_join(chr_length, by = "Chr") %>%
mutate(sex = replace_na(sex, "female")) %>% # assume all F2 nymphs are females
#dplyr::filter(sex == c("female", "male")) %>% # keep only adult F2 (exclude nymphs and eggs)--> if I do that, I dont have enough sites to calculate the recombination freq...
mutate(fam = str_extract(sample, "[^_]+")) %>%
pivot_wider(names_from = gt, values_from = obs) }
recomb_freq <- list()
# apply the function for each element in the large list (list of lists) of the chromosome, per family
for (chr in chromosomes) {
for (fam in family) {
recomb_freq[[chr]][[fam]] <- func_recom(obs[[fam]][[chr]]) } }
# bind all element into one data frame (first bind each chromosome, then bind all chromosomes together)
obs_df <- tibble()
obs_dfAll <- tibble()
for (chr in chromosomes) {
obs_df <- bind_rows(recomb_freq [[chr]])
obs_dfAll <- rbind(obs_df, obs_dfAll) %>% replace(., is.na(.), 0)}
# calculate the recombinant pairs, and their proportion out of total unique pairs, per sample
obs_dfAll <- obs_dfAll %>%
group_by(sample) %>%
mutate(recomb_pairs = case_when(sex == "female" ~ `0/0` * `0/1`,
sex == "male" ~ (`0/0`+`1/1`) * `0/1`)) %>%
mutate(freq = recomb_pairs/sum_pairs) %>%
mutate(freq_cM_bp = freq/bp)
head(obs_dfAll)
# plot the median of recombination freq, per chromosome
# filter out families with low number of sites
ggplot(filter(obs_dfAll, total > 10), aes(x=Chr, y=freq_cM_bp, fill=sex)) +
geom_boxplot() +
facet_wrap(~Chr, scale="free") +
theme_classic() +
theme(axis.text.x=element_blank()) +
ylab("Recombintaion frequency (cM/bp)") +
xlab(element_blank())
# Step 1: Call the pdf command to start the plot
pdf(file = "/Users/nuriteliash/My Drive/(1) OIST work/Articles_OIST/varroa pedigree MS/Figures/recomb_manual.pdf",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 4) # The height of the plot in inches
# Step 2: Create the plot with R code
# plot the median of recombination freq, per chromosome, filter out families with low number of sites
ggplot(filter(obs_dfAll, total > 10), aes(x=Chr, y=freq_cM_bp, fill=sex)) +
geom_boxplot() +
facet_wrap(~Chr, scale="free") +
theme_classic() +
theme(axis.text.x=element_blank()) +
ylab("Recombintaion frequency (cM/bp)") +
xlab(element_blank())
# Step 3: Run dev.off() to create the file!
dev.off()
# Step 1: Call the pdf command to start the plot
png(file = "/Users/nuriteliash/My Drive/(1) OIST work/Articles_OIST/varroa pedigree MS/Figures/recomb_manual.png",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 4) # The height of the plot in inches
# Step 2: Create the plot with R code
# plot the median of recombination freq, per chromosome, filter out families with low number of sites
ggplot(filter(obs_dfAll, total > 10), aes(x=Chr, y=freq_cM_bp, fill=sex)) +
geom_boxplot() +
facet_wrap(~Chr, scale="free") +
theme_classic() +
theme(axis.text.x=element_blank()) +
ylab("Recombintaion frequency (cM/bp)") +
xlab(element_blank())
# Step 3: Run dev.off() to create the file!
dev.off()
# Step 1: Call the pdf command to start the plot
pdf(file = "/Users/nuriteliash/My Drive/(1) OIST work/Articles_OIST/varroa pedigree MS/Figures/recomb_manual.pdf",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 4) # The height of the plot in inches
# Step 2: Create the plot with R code
# plot the median of recombination freq, per chromosome, filter out families with low number of sites
ggplot(filter(obs_dfAll, total > 10), aes(x=Chr, y=freq_cM_bp, fill=sex)) +
geom_boxplot() +
facet_wrap(~Chr, scale="free") +
theme_classic() +
theme(axis.text.x=element_blank()) +
ylab("Recombintaion frequency (cM/bp)") +
xlab(element_blank())
# Step 3: Run dev.off() to create the file!
while (!is.null(dev.list())) dev.off()
# Step 2: Create the plot with R code
# plot the median of recombination freq, per chromosome, filter out families with low number of sites
ggplot(filter(obs_dfAll, total > 10), aes(x=Chr, y=freq_cM_bp, fill=sex)) +
geom_boxplot() +
facet_wrap(~Chr, scale="free") +
theme_classic() +
theme(axis.text.x=element_blank()) +
ylab("Recombintaion frequency (cM/bp)") +
xlab(element_blank())
library("tidyverse")
library("dplyr")
library("ggplot2")
library("ggpubr")
library("scales")
library("ggpubr")
library("gridExtra")
library("grid")
library("GGally")
knitr::opts_chunk$set(echo = TRUE)
ind_het <- read_delim("/Users/nuriteliash/Documents/GitHub/varroa-linkage-map/data/vcf_filter/Q40BIALLDP16HDP40mis.5Chr7/Q40BIALLDP16HDP40mis.5Chr7.het", delim = "\t",
col_names = c("ind","homo_ob", "homo_ex", "nsites", "f"), skip = 1)
# find all 'female' and 'male'
male <- grep("son",ind_het$ind)
female <- grep("dat|fn|sis",ind_het$ind)
ind_het_sex <- ind_het %>%
mutate(sex = ifelse(row_number() %in% female, "female", ifelse(row_number() %in% male, "male", "not-determined"))) %>%
mutate(hom_prop =  homo_ob/nsites) %>%
mutate(het_prop = (nsites-homo_ob)/nsites) %>%
#keep only adult mites, for which sex is absolutly determined (exclude nymphs and eggs ("not determined"))
dplyr::filter(sex %in% c("male", "female"))
# is there a significant difference in the proportion of heterozygotic sites between males and females?5
wil_var <- wilcox.test(het_prop ~ sex, alternative = "two.sided", data = ind_het_sex)
t.test(asin(sqrt(het_prop)) ~ sex, alternative = "two.sided", data = ind_het_sex)
# no significant different (both wilcoxone and welch-test)
# plot heterozygosity proportion, in each sex
p_var <- ggplot(ind_het_sex) +
geom_boxplot(aes(x = sex, y = het_prop, fill = sex)) + scale_y_continuous() +
theme_classic() +
labs(title = "Varroa mite",
subtitle = paste("p-value=",  wil_var$p.value)) +
ylab("Proportion of heterozygotic sites")
# plot heterozygocity proportion, in each individual, color code by sex
p_var_ind <- ggplot(ind_het_sex, aes(x=ind, y=het_prop, color=sex)) +
geom_point(size=3) +
theme_classic() +
ggtitle("Proportion of heterzygotic sites per individual") +
xlab("Sample") +
ylab("Proportion of het sites")
ind_het_bee <- read_delim("/Users/nuriteliash/Documents/GitHub/Variant_Calling_bees/data/vcf_stats/bee.het", delim = "\t",
col_names = c("ind","homo_ob", "homo_ex", "nsites", "f"), skip = 1)
# add the sex of each sample, and the proportion of homosyzgotic and hetero sites
sex <- read.csv("/Users/nuriteliash/Documents/GitHub/Variant_Calling_bees/data/meta.csv")
ind_het_bee <- left_join(ind_het_bee,sex, by ="ind") %>%
mutate(hom_prop =  homo_ob/nsites) %>%
mutate(het_prop = (nsites-homo_ob)/nsites)
# is there a significant difference in the proportion of heterozygotic sites between males and females?5
wil_bee <- wilcox.test(het_prop ~ sex, alternative = "two.sided", data = ind_het_bee)
t.test(asin(sqrt(het_prop)) ~ sex, alternative = "two.sided", data = ind_het_bee)
# no significant different (both wilcoxone and welch-test)
# plot heterozygocity proportion, in each sex
p_bee <- ggplot(ind_het_bee) +
geom_boxplot(aes(x = sex, y = het_prop, fill = sex)) + scale_y_continuous() +
theme_classic() +
labs(title = "Honeybee",
subtitle = paste("p-value=",  wil_bee$p.value)) +
ylab("Proportion of heterozygotic sites")
# plot heterozygosity proportion, in each individual, color code by sex
p_bee_ind <- ggplot(ind_het_bee, aes(x=ind, y=het_prop, color=sex)) +
geom_point(size=3) +
theme_classic() +
ggtitle("Proportion of heterzygotic sites per bee") +
xlab("Sample") +
ylab("Proportion of het sites")
grid.arrange(top= grid::textGrob("Proportion of heterozygotic sites in males and females", gp=grid::gpar(fontsize=20)), p_bee, p_var, nrow = 1)
grid.arrange(gp=grid::gpar(fontsize=20)), p_bee, p_var, nrow = 1)
grid.arrange(p_bee, p_var, nrow = 1)
