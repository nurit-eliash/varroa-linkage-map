View(pDWVa_CuP8)
View(DWVa_CuP8)
View(CuP8)
View(ARV2_CuP8)
View(VDV2_CuP8)
# load the two matrices:
# the moduleâ€“trait association matrix
load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/moduleTraitCor_66.RData");
# and the viral abundance correlogram
load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/virusAbundCor_66.RData");
# make correlation matrix of the "moduleTraitCor":
corModulTrait_66 <- cor(moduleTraitCor_66)
# (1) Mantel test using "ape" library:
mantel.test(corModulTrait_66, virusAbundCor_66, graph = TRUE,
main = "Mantel test",
xlab = "z-statistic", ylab = "Density",
sub = "The vertical line shows the observed z-statistic")
# (2) Mantel test using "vegan" library:
mantel(corModulTrait_66, virusAbundCor_66, method="pearson", permutations=1000)
#plot the correlation
verboseScatterplot(x = virusAbundCor_66, y = corModulTrait_66, main = "Viral abundance predicts varroa-virus interaction", xlab = "Viruses interaction", ylab = "Varroa-virus interaction", abline = T, abline.color = "black")
corModulTrait_66
#plot the correlation
verboseScatterplot(x = virusAbundCor_66, y = corModulTrait_66, main = "Viral abundance predicts varroa-virus interaction", xlab = "Viruses interaction", ylab = "Varroa-virus interaction", abline = T, abline.color = "black", col = "black")
#plot the correlation
verboseScatterplot(x = virusAbundCor_66, y = corModulTrait_66, main = "Viral abundance predicts varroa-virus interaction", xlab = "Viruses interaction", ylab = "Varroa-virus interaction", abline = T, abline.color = "black", bg = "black")
# load library
library("data.table")
library("dplyr")
library("tidyverse")
library("vegan")
library("DESeq2")
library("ggfortify")
library("WGCNA")
library("rmarkdown")
library("knitr") # for the markdown
library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library("cluster")
library("ggpmisc")
library("DEGreport")
# load the module network, gene expression and viral load data of the 66 libraries analysis:
names <- load("/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/Varroa_modules_networkConstruction-auto.RData")
names
#load geneTraitSignificance (geneTraitSignificance), module membership (geneModuleMembership) and intramodular connectivity (Alldegrees1) for each gene:
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/IntraModCon66.RData")
names
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/geneTraitANDgeneMM_66.RData")
names
#load the genes tpm per library, and viral load:
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/varroa_virus-01-dataInput.RData")
names
#load the correlation data for the module-trait relationship:
names <- load("/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/moduleTraitCor_66.RData")
names
# and of the 57 libraries analysis:
names <- load("/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/Varroa_modules_networkConstruction-auto_57.RData")
names
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/IntraModCon57.RData")
names
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/geneTraitANDgeneMM_57.RData")
names
#load the genes tpm per library, and viral load:
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/varroa_virus-01-dataInput_57.RData")
names
#load the correlation data for the module-trait relationship:
names <- load("/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/moduleTraitCor_57.RData")
names
# overlap the two modules tables, to check if the modules contain the same genes
# to avoid confusion, i used the module colors for the 66 libs ("moduleColors" 15 modules + grey=genes with no module), and the modules numbers for the 57 libs ("moduleLabels_57" 14 modules + "zero" = genes with no module):
compareModules <- overlapTable(
moduleColors, moduleLabels_57,
na.rm = FALSE, ignore = NULL,
levels1 = NULL, levels2 = NULL)
compareModules
geneInfoMagenta_66 = data.frame(
module = moduleColors,
geneTraitSignificance_66,
geneModuleMembership_66,
IntraModCon = Alldegrees1_66$kWithin) %>%
dplyr::select(c(module, IntraModCon, MMmagenta, GS.DWVa, GS.VDV2, GS.ARV_2)) %>%
dplyr::filter(module == "magenta") %>%
rownames_to_column("genes")
geneInfoBlack_57 = data.frame(
module = moduleColors_57,
geneTraitSignificance_57,
geneModuleMembership_57,
IntraModCon = Alldegrees1_57$kWithin) %>%
dplyr::select(c(module, IntraModCon, MMblack, GS.DWVa, GS.VDV2, GS.ARV_2)) %>%
dplyr::filter(module%in% c("black")) %>%
rownames_to_column("genes")
# make a table of the overlapping genes
overlap <- inner_join(geneInfoMagenta_66, geneInfoBlack_57, by = "genes")
#change the columns names to specify from which analysis it was taken (66libs or 57libs)
overlap <- overlap %>%
dplyr::rename(module_66 = module.x,
module_57 = module.y,
IntraModCon_66 = IntraModCon.x,
IntraModCon_57 = IntraModCon.y,
GS.DWVa_66 = GS.DWVa.x,
GS.DWVa_57 = GS.DWVa.y,
GS.VDV2_66 = GS.VDV2.x,
GS.VDV2_57 = GS.VDV2.y,
GS.ARV_2_66 = GS.ARV_2.x,
GS.ARV_2_57 = GS.ARV_2.y)
nrow(overlap)
overlap
# we have 40 overlapping genes in the magenat and balck modules, as the "overlapTable()" function computed.
# add gene annotation:
# load the annotation file:
annot_varroa <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/annot_varroa.csv", col_names = TRUE, )
# remove the "LOC" from the gene name
annot_varroa$Locus <- str_replace(annot_varroa$Locus, "LOC", '')
# and change the col name to "genes", so it will the same as in the "overlap" table
colnames(annot_varroa)[which(names(annot_varroa) == "Locus")] <- "genes"
head(annot_varroa)
#now join by "genes" name (INNER JOIN: returns rows when there is a match in both tables)
overlap_annot <- inner_join(overlap, annot_varroa, by = "genes") %>%
dplyr::select(c(genes, module_66, module_57,
IntraModCon_66,
IntraModCon_57,
GS.DWVa_66,
GS.DWVa_57,
GS.VDV2_66,
GS.VDV2_57,
GS.ARV_2_66,
GS.ARV_2_57, Name, Accession, 'Protein product', Length, 'Protein Name'))
# and filter out duplicated genes
overlap_annot <-overlap_annot[!duplicated(overlap_annot[,'genes']),]
# how many genes overlap between Magenta module of the 66 libs, and the Black module of the 57 modules?
nrow(overlap_annot)
write_csv(x = as.data.frame(overlap_annot), "results/overlap_annot.csv")
overlap_annot
overlap_annot
View(overlap)
View(overlap_annot)
#load the former hub-genes:
hub_old <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/hub_annot_old.csv", col_names = TRUE, )
hub_old
View(hub_old)
hub_old$genes <- as.character(hub_old$genes)
# how many of the hub_old genes exist in the magenta module?
#return all rows from x, and all columns from x and y.
f <- left_join(geneInfoMagenta_66, hub_old, by = "genes")
sum(!is.na(f$virus.x))
#make a data.frame of all genes with modules:
all.genes.66 <- data.frame(
module = moduleColors,
geneTraitSignificance_66,
GSPadjust_66,
geneModuleMembership_66,
MMPadjust_66,
IntraModCon = Alldegrees1_66$kWithin) %>%
dplyr::select(c(module, IntraModCon, GS.DWVa, pdj.GS.DWVa, GS.VDV2, pdj.GS.VDV2, GS.ARV_2, pdj.GS.ARV_2, MMpurple, padj.MMpurple, MMpink, padj.MMpink, MMgreen, padj.MMgreen)) %>%
rownames_to_column("genes")
left_join(hub_old, all.genes.66, by = "genes")
all.genes.57 <- data.frame(
module = moduleColors_57,
geneTraitSignificance_57,
GSPadjust_57,
geneModuleMembership_57,
MMPadjust_57,
IntraModCon = Alldegrees1_57$kWithin) %>%
dplyr::select(c(module, IntraModCon, GS.DWVa, pdj.GS.DWVa, GS.VDV2, pdj.GS.VDV2, GS.ARV_2, pdj.GS.ARV_2, MMsalmon, padj.MMsalmon)) %>%
rownames_to_column("genes")
left_join(hub_old, all.genes.57, by = "genes")
# prepare a table describing each gene number, short-name and full annotation, of the silenced genes:
genes <- as.factor(c("111250594", "111244103","111244832", "111248360", "111245345", "111248674", "111251059", "111245371", "111244631", "111252566", "111249664"))
annot <- as.factor(c("Sarcalumenin", "glycerol-3-phosphate dehydrogenase", "Calmodulin", "Cuticle-protein8","Cuticle-protein-14", "Glutamate-receptor-3", "Glutamate-gated-chloride-channel-subunit-beta", "Organic-cation-transporter-protein", "Twitchin", "Annulin", "Defense-protein-Hdd11"))
ShortName <- as.factor(c("Sar", "Gly","clmd", "CuP8", "CuP14", "Glut", "Chl", "Trans", "Twitch", "Anl", "HDD"))
silenced.genes <- data.frame(genes, ShortName, annot)
# to what module the silenced genes belong to?
silenced_overlap.66 <- left_join(silenced.genes, all.genes.66, by = "genes")
silenced_overlap.57 <- left_join(silenced.genes, all.genes.57, by = "genes")
silenced_overlap.66
silenced_overlap.57
View(silenced_overlap.66)
suppressPackageStartupMessages(library(tidyverse))
library(dplyr)
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(ggpubr)
library(anchors)
library(broom)
library(HDInterval)
library(coda)
library(brms)
library(devtools)
library(rjags)
library(BEST)
library(ggpubr)
library(ggthemes)
library(car)
library(stats)
library(moments)
library(intervcomp)
library(grid)
library(formattable)
library(gridExtra)
library(ggsignif)
library(patchwork)
library(cowplot)
dat_virus <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-knockdown/data/virus_in_silenced.csv")
dat_gene <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-knockdown/data/Silencing_qPCR.csv")
dat_gene <- dat_gene %>%
filter((Treatment %in% c("Silenced", "Control"))) %>%
filter(Time == "48h")
results_gene <- data.frame()
for (gene in unique(dat_gene$Gene))
{
test <- wilcox.test(RQ ~ Treatment, alternative = "two.sided", data = filter(dat_gene, Gene == gene))
results_gene <- rbind(results_gene, data.frame(gene = gene, pvalue = test$p.value))
}
#We are testing the same knockdown gene several times, creating a multiple comparison problem, we fix that with a FDR correction per gene
geneExp <- group_by(results_gene, gene) %>%
mutate(padj = p.adjust(pvalue, method = "fdr"))
geneExp <- dplyr::rename(geneExp, Gene = gene) #i changed the colname of "gene" to "Gene". for some reason this was disturbing in "filter" function later on.
geneExp
table <- filter(dat_gene, Gene == gene)
N <- nrow(table)
N
table
geneExp
View(geneExp)
geneExp$padj
# plot all genes expression for silenced and control-mites, in a boxplot
boxplot <- list()
for (gene in unique(dat_gene$Gene))
{
table <- filter(dat_gene, Gene == gene)
N <- nrow(table)
geneExppadj <- filter(geneExp, Gene == gene)
Padjust <- formattable(as.double(geneExppadj[1,3], digits = 2, format = "f"))
# Plot
p <- ggboxplot(table, x = "Treatment", y = "RQ",
main = paste(gene,",Padjust=",Padjust,", n=",N),
color = "Treatment", palette = c("#00AFBB", "#E7B800"),
order = c("Control", "Silenced"),
ylab = "Relative expression", xlab = "Treatment")  +
theme(legend.position = "none", text = element_text(size=8))
boxplot[[gene]] <- p
}
# plot all 11 genes in one figure
grid.arrange(boxplot$Anl, boxplot$clmd, boxplot$Chl, boxplot$CuP14, boxplot$CuP8, boxplot$Glut, boxplot$Gly, boxplot$HDD, boxplot$Prolin, boxplot$Sar, boxplot$Trans, boxplot$Twitch, nrow = 3, ncol = 4)
# plot DWVa viral loads for silenced and control-mites, in a boxplot
DWVaLoad <- filter(viralLoad, virus == "DWVa")
DWVaLoad$gene = gsub('exp', 'DWVa', DWVaLoad$gene)
results_load <- data.frame()
for (gene in unique(dat_virus$Experiment))
for (virus in unique(dat_virus$Gene)) {
test <- wilcox.test(RQ ~ Treatment, alternative = "two.sided", data = filter(dat_virus, Experiment == gene & Gene == virus))
results_load <- rbind(results_load, data.frame(gene = gene, virus = virus, pvalue = test$p.value))
}
#We are testing the same knockdown gene several times, creating a multiple comparison problem, we fix that with a FDR correction per gene
viralLoad <- group_by(results_load, gene) %>% mutate(padj = p.adjust(pvalue, method = "fdr"))
#We are testing the same knockdown gene several times, creating a multiple comparison problem, we fix that with a FDR correction per gene
viralLoad <- group_by(results_load, gene) %>% mutate(padj = p.adjust(pvalue, method = "fdr"))
viralLoad
# plot DWVa viral loads for silenced and control-mites, in a boxplot
DWVaLoad <- filter(viralLoad, virus == "DWVa")
DWVaLoad$gene = gsub('exp', 'DWVa', DWVaLoad$gene)
DWVaLoad <- dplyr::rename(DWVaLoad, Gene = gene) #i changed the colname of "gene" to "Gene". for some reason this was disturbing in "filter" function later on.
datDWVa <- filter(dat_virus, Gene == "DWVa")
datDWVa$Experiment = gsub('exp', 'DWVa', datDWVa$Experiment)
boxplotDWVa <- list()
for (gene in unique(datDWVa$Experiment))
{
table <- filter(datDWVa, Experiment == gene)
N <- nrow(table)
DWVapadj <- filter(DWVaLoad, Gene == gene)
Padjust <- formattable(as.double(DWVapadj[1,4], digits = 2, format = "f"))
# Plot
p <- ggboxplot(table, x = "Treatment", y = "RQ",
main = paste(gene,",Padjust=",Padjust,", n=",N),
color = "Treatment", palette = c("#00AFBB", "#E7B800"),
order = c("Control", "Silenced"),
ylab = "Viral load", xlab = "Treatment")  +
theme(legend.position = "none", text = element_text(size=8))
boxplotDWVa[[gene]] <- p
}
# plot the viral load of DWVa in 9 silenced genes:
grid.arrange(boxplotDWVa$Anl, boxplotDWVa$clmd, boxplotDWVa$CuP14, boxplotDWVa$CuP8, boxplotDWVa$Glut, boxplotDWVa$Gly, boxplotDWVa$Sar, boxplotDWVa$Trans, boxplotDWVa$Twitch, nrow = 3, ncol = 3)
Padjust
datDWVa
DWVaLoad
viralLoad
# plot DWVa viral loads for silenced and control-mites, in a boxplot
DWVaLoad <- filter(viralLoad, virus == "DWVa")
DWVaLoad
# plot DWVa viral loads for silenced and control-mites, in a boxplot
DWVaLoad <- filter(viralLoad, virus == "DWVa")
DWVaLoad$gene = gsub('exp', 'DWVa', DWVaLoad$gene)
DWVaLoad <- dplyr::rename(DWVaLoad, Gene = gene) #i changed the colname of "gene" to "Gene". for some reason this was disturbing in "filter" function later on.
DWVaLoad
# plot VDV2 viral loads for silenced and control-mites, in a boxplot
VDV2Load <- viralLoad %>% filter(virus == "VDV2") #%>% gsub('exp', 'VDV2')
VDV2Load$gene = gsub('exp', 'VDV2', VDV2Load$gene)
VDV2Load <- dplyr::rename(VDV2Load, Gene = gene) #i changed the colname of "gene" to "Gene". for some reason this was disturbing in "filter" function later on.
VDV2Load
datVDV2 <- filter(dat_virus, Gene == "VDV2")
datVDV2$Experiment = gsub('exp', 'VDV2', datVDV2$Experiment)
boxplotVDV2 <- list()
for (gene in unique(datVDV2$Experiment))
{
table <- filter(datVDV2, Experiment == gene)
N <- nrow(table)
VDV2padj <- filter(VDV2Load, Gene == gene)
Padjust <- formattable(as.double(VDV2padj[1,4], digits = 2, format = "f"))
# Plot
p <- ggboxplot(table, x = "Treatment", y = "RQ",
main = paste(gene,",Padjust=",Padjust,", n=",N),
color = "Treatment", palette = c("#00AFBB", "#E7B800"),
order = c("Control", "Silenced"),
ylab = "Viral load", xlab = "Treatment")  +
theme(legend.position = "none", text = element_text(size=8))
boxplotVDV2[[gene]] <- p
}
#Padjust <- formattable(as.double(filter(VDV2Load$padj[, gene==gene[1]), digits = 2, format = "f"))
# plot the viral load of VDV2 in 9 silenced genes:
grid.arrange(boxplotVDV2$Anl, boxplotVDV2$clmd, boxplotVDV2$CuP14, boxplotVDV2$CuP8, boxplotVDV2$Glut, boxplotVDV2$Gly, boxplotVDV2$Sar, boxplotVDV2$Trans, boxplotVDV2$Twitch, nrow = 3, ncol = 3)
VDV2Load
viralLoad
results_load
dat_virus
dat_virus <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-knockdown/data/virus_in_silenced.csv")
dat_gene <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-knockdown/data/Silencing_qPCR.csv")
dat_gene <- dat_gene %>%
filter((Treatment %in% c("Silenced", "Control"))) %>%
filter(Time == "48h")
View(dat_gene)
View(dat_virus)
results_gene <- data.frame()
for (gene in unique(dat_gene$Gene))
{
test <- wilcox.test(RQ ~ Treatment, alternative = "two.sided", data = filter(dat_gene, Gene == gene))
results_gene <- rbind(results_gene, data.frame(gene = gene, pvalue = test$p.value))
}
results_gene
#We are testing the same knockdown gene several times, creating a multiple comparison problem, we fix that with a FDR correction per gene
geneExp <- group_by(results_gene, gene) %>%
mutate(padj = p.adjust(pvalue, method = "fdr"))
geneExp <- dplyr::rename(geneExp, Gene = gene) #i changed the colname of "gene" to "Gene". for some reason this was disturbing in "filter" function later on.
geneExp
# plot all genes expression for silenced and control-mites, in a boxplot
boxplot <- list()
for (gene in unique(dat_gene$Gene))
{
table <- filter(dat_gene, Gene == gene)
N <- nrow(table)
geneExppadj <- filter(geneExp, Gene == gene)
Padjust <- formattable(as.double(geneExppadj[1,3], digits = 2, format = "f"))
# Plot
p <- ggboxplot(table, x = "Treatment", y = "RQ",
main = paste(gene,",Padjust=",Padjust,", n=",N),
color = "Treatment", palette = c("#00AFBB", "#E7B800"),
order = c("Control", "Silenced"),
ylab = "Relative expression", xlab = "Treatment")  +
theme(legend.position = "none", text = element_text(size=8))
boxplot[[gene]] <- p
}
geneExp
results_load <- data.frame()
for (gene in unique(dat_virus$Experiment))
for (virus in unique(dat_virus$Gene)) {
test <- wilcox.test(RQ ~ Treatment, alternative = "two.sided", data = filter(dat_virus, Experiment == gene & Gene == virus))
results_load <- rbind(results_load, data.frame(gene = gene, virus = virus, pvalue = test$p.value))
}
results_load
View(results_load)
#We are testing the same knockdown gene several times, creating a multiple comparison problem, we fix that with a FDR correction per gene
viralLoad <- group_by(results_load, gene) %>% mutate(padj = p.adjust(pvalue, method = "fdr"))
View(viralLoad)
for (gene in unique(dat_virus$Experiment))
for (virus in unique(dat_virus$Gene)) {
test <- wilcox.test(RQ ~ Treatment, alternative = "all", data = filter(dat_virus, Experiment == gene & Gene == virus))
results_load <- rbind(results_load, data.frame(gene = gene, virus = virus, pvalue = test$p.value))
}
results_load <- data.frame()
for (gene in unique(dat_virus$Experiment))
for (virus in unique(dat_virus$Gene)) {
test <- wilcox.test(RQ ~ Treatment, alternative = "less", data = filter(dat_virus, Experiment == gene & Gene == virus))
results_load <- rbind(results_load, data.frame(gene = gene, virus = virus, pvalue = test$p.value))
}
#We are testing the same knockdown gene several times, creating a multiple comparison problem, we fix that with a FDR correction per gene
viralLoad <- group_by(results_load, gene) %>% mutate(padj = p.adjust(pvalue, method = "fdr"))
viralLoad
results_load <- data.frame()
for (gene in unique(dat_virus$Experiment))
for (virus in unique(dat_virus$Gene)) {
test <- wilcox.test(RQ ~ Treatment, alternative = "greater", data = filter(dat_virus, Experiment == gene & Gene == virus))
results_load <- rbind(results_load, data.frame(gene = gene, virus = virus, pvalue = test$p.value))
}
#We are testing the same knockdown gene several times, creating a multiple comparison problem, we fix that with a FDR correction per gene
viralLoad <- group_by(results_load, gene) %>% mutate(padj = p.adjust(pvalue, method = "fdr"))
viralLoad
View(viralLoad)
suppressPackageStartupMessages(library(tidyverse))
library(dplyr)
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(ggpubr)
library(anchors)
library(broom)
library(HDInterval)
library(coda)
library(brms)
library(devtools)
library(rjags)
library(BEST)
library(ggpubr)
library(ggthemes)
library(car)
library(stats)
library(moments)
library(intervcomp)
library(grid)
library(formattable)
library(gridExtra)
library(ggsignif)
library(patchwork)
library(cowplot)
dat_virus <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-knockdown/data/virus_in_silenced.csv")
dat_gene <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-knockdown/data/Silencing_qPCR.csv")
dat_gene <- dat_gene %>%
filter((Treatment %in% c("Silenced", "Control"))) %>%
filter(Time == "48h")
results_gene <- data.frame()
for (gene in unique(dat_gene$Gene))
{
test <- wilcox.test(RQ ~ Treatment, alternative = "two.sided", data = filter(dat_gene, Gene == gene))
results_gene <- rbind(results_gene, data.frame(gene = gene, pvalue = test$p.value))
}
#We are testing the same knockdown gene several times, creating a multiple comparison problem, we fix that with a FDR correction per gene
geneExp <- group_by(results_gene, gene) %>%
mutate(padj = p.adjust(pvalue, method = "fdr"))
geneExp <- dplyr::rename(geneExp, Gene = gene) #i changed the colname of "gene" to "Gene". for some reason this was disturbing in "filter" function later on.
# plot all genes expression for silenced and control-mites, in a boxplot
boxplot <- list()
for (gene in unique(dat_gene$Gene))
{
table <- filter(dat_gene, Gene == gene)
N <- nrow(table)
geneExppadj <- filter(geneExp, Gene == gene)
Padjust <- formattable(as.double(geneExppadj[1,3], digits = 2, format = "f"))
# Plot
p <- ggboxplot(table, x = "Treatment", y = "RQ",
main = paste(gene,",Padjust=",Padjust,", n=",N),
color = "Treatment", palette = c("#00AFBB", "#E7B800"),
order = c("Control", "Silenced"),
ylab = "Relative expression", xlab = "Treatment")  +
theme(legend.position = "none", text = element_text(size=8))
boxplot[[gene]] <- p
}
# plot all 11 genes in one figure
grid.arrange(boxplot$Anl, boxplot$clmd, boxplot$Chl, boxplot$CuP14, boxplot$CuP8, boxplot$Glut, boxplot$Gly, boxplot$HDD, boxplot$Prolin, boxplot$Sar, boxplot$Trans, boxplot$Twitch, nrow = 3, ncol = 4)
#lapply(boxplot, grid.arrange, nrow = 4, ncol = 3)
results_load <- data.frame()
for (gene in unique(dat_virus$Experiment))
for (virus in unique(dat_virus$Gene)) {
test <- wilcox.test(RQ ~ Treatment, alternative = "greater", data = filter(dat_virus, Experiment == gene & Gene == virus))
results_load <- rbind(results_load, data.frame(gene = gene, virus = virus, pvalue = test$p.value))
}
#We are testing the same knockdown gene several times, creating a multiple comparison problem, we fix that with a FDR correction per gene
viralLoad <- group_by(results_load, gene) %>% mutate(padj = p.adjust(pvalue, method = "fdr"))
viralLoad
View(viralLoad)
viralLoad
results_load <- data.frame()
for (gene in unique(dat_virus$Experiment))
for (virus in unique(dat_virus$Gene)) {
test <- wilcox.test(RQ ~ Treatment, alternative = "two.sided", data = filter(dat_virus, Experiment == gene & Gene == virus))
results_load <- rbind(results_load, data.frame(gene = gene, virus = virus, pvalue = test$p.value))
}
#We are testing the same knockdown gene several times, creating a multiple comparison problem, we fix that with a FDR correction per gene
viralLoad <- group_by(results_load, gene) %>% mutate(padj = p.adjust(pvalue, method = "fdr"))
results_load <- data.frame()
for (gene in unique(dat_virus$Experiment))
for (virus in unique(dat_virus$Gene)) {
test <- wilcox.test(RQ ~ Treatment, alternative = "greater", data = filter(dat_virus, Experiment == gene & Gene == virus))
results_load <- rbind(results_load, data.frame(gene = gene, virus = virus, pvalue = test$p.value))
}
#We are testing the same knockdown gene several times, creating a multiple comparison problem, we fix that with a FDR correction per gene
viralLoad <- group_by(results_load, gene) %>% mutate(padj = p.adjust(pvalue, method = "fdr"))
viralLoad
results_load <- data.frame()
for (gene in unique(dat_virus$Experiment))
for (virus in unique(dat_virus$Gene)) {
test <- wilcox.test(RQ ~ Treatment, alternative = "two.sided", data = filter(dat_virus, Experiment == gene & Gene == virus))
results_load <- rbind(results_load, data.frame(gene = gene, virus = virus, pvalue = test$p.value))
}
#We are testing the same knockdown gene several times, creating a multiple comparison problem, we fix that with a FDR correction per gene
viralLoad <- group_by(results_load, gene) %>% mutate(padj = p.adjust(pvalue, method = "fdr"))
